
BUILD_OWN_RTOS_SECTION_3_002.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000142c  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b0  080015dc  080015dc  000115dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800168c  0800168c  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  0800168c  0800168c  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800168c  0800168c  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800168c  0800168c  0001168c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001690  08001690  00011690  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08001694  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000040  20000068  080016fc  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000a8  080016fc  000200a8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .debug_info   000037cf  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000aab  00000000  00000000  00023867  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000001c8  00000000  00000000  00024318  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000160  00000000  00000000  000244e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a6a4  00000000  00000000  00024640  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00002641  00000000  00000000  0003ece4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008df13  00000000  00000000  00041325  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000cf238  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000d1c  00000000  00000000  000cf28c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000068 	.word	0x20000068
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080015c4 	.word	0x080015c4

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000006c 	.word	0x2000006c
 80001ec:	080015c4 	.word	0x080015c4

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <RCC_Config>:
#define GREEN		(1U<<12)



void RCC_Config(void)
{
 8000290:	b480      	push	{r7}
 8000292:	af00      	add	r7, sp, #0
	/* Enable GPIO Port D */
	RCC->AHB1ENR |= GPIOD_CLOCK;
 8000294:	4b05      	ldr	r3, [pc, #20]	; (80002ac <RCC_Config+0x1c>)
 8000296:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000298:	4a04      	ldr	r2, [pc, #16]	; (80002ac <RCC_Config+0x1c>)
 800029a:	f043 0308 	orr.w	r3, r3, #8
 800029e:	6313      	str	r3, [r2, #48]	; 0x30
	//RCC->CR |= (1U<<16);

	/* Check HSE ready */
	//while(!((RCC->CR) & (1U<<17)));

}
 80002a0:	bf00      	nop
 80002a2:	46bd      	mov	sp, r7
 80002a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002a8:	4770      	bx	lr
 80002aa:	bf00      	nop
 80002ac:	40023800 	.word	0x40023800

080002b0 <GPIO_Config>:

void GPIO_Config(void)
{
 80002b0:	b480      	push	{r7}
 80002b2:	af00      	add	r7, sp, #0
	GPIOD->MODER |= GREEN_BIT| ORANGE_BIT| RED_BIT| BLUE_BIT;
 80002b4:	4b05      	ldr	r3, [pc, #20]	; (80002cc <GPIO_Config+0x1c>)
 80002b6:	681b      	ldr	r3, [r3, #0]
 80002b8:	4a04      	ldr	r2, [pc, #16]	; (80002cc <GPIO_Config+0x1c>)
 80002ba:	f043 43aa 	orr.w	r3, r3, #1426063360	; 0x55000000
 80002be:	6013      	str	r3, [r2, #0]
}
 80002c0:	bf00      	nop
 80002c2:	46bd      	mov	sp, r7
 80002c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002c8:	4770      	bx	lr
 80002ca:	bf00      	nop
 80002cc:	40020c00 	.word	0x40020c00

080002d0 <main>:
#include "uart.h"
#include "timebase.h"


int main(void)
{
 80002d0:	b580      	push	{r7, lr}
 80002d2:	af00      	add	r7, sp, #0
	RCC_Config();
 80002d4:	f7ff ffdc 	bl	8000290 <RCC_Config>
	GPIO_Config();
 80002d8:	f7ff ffea 	bl	80002b0 <GPIO_Config>
	UART_TRANSMIT_Config();
 80002dc:	f000 f932 	bl	8000544 <UART_TRANSMIT_Config>
	TIME_BASE_INIT();
 80002e0:	f000 f8f8 	bl	80004d4 <TIME_BASE_INIT>
	while(1)
	{
		printf("Hello My Precious...\n\r");
 80002e4:	4803      	ldr	r0, [pc, #12]	; (80002f4 <main+0x24>)
 80002e6:	f000 fa17 	bl	8000718 <iprintf>
		Delay(1);
 80002ea:	2001      	movs	r0, #1
 80002ec:	f000 f8a8 	bl	8000440 <Delay>
		printf("Hello My Precious...\n\r");
 80002f0:	e7f8      	b.n	80002e4 <main+0x14>
 80002f2:	bf00      	nop
 80002f4:	080015dc 	.word	0x080015dc

080002f8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80002f8:	b580      	push	{r7, lr}
 80002fa:	b086      	sub	sp, #24
 80002fc:	af00      	add	r7, sp, #0
 80002fe:	60f8      	str	r0, [r7, #12]
 8000300:	60b9      	str	r1, [r7, #8]
 8000302:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000304:	2300      	movs	r3, #0
 8000306:	617b      	str	r3, [r7, #20]
 8000308:	e00a      	b.n	8000320 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800030a:	f3af 8000 	nop.w
 800030e:	4601      	mov	r1, r0
 8000310:	68bb      	ldr	r3, [r7, #8]
 8000312:	1c5a      	adds	r2, r3, #1
 8000314:	60ba      	str	r2, [r7, #8]
 8000316:	b2ca      	uxtb	r2, r1
 8000318:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800031a:	697b      	ldr	r3, [r7, #20]
 800031c:	3301      	adds	r3, #1
 800031e:	617b      	str	r3, [r7, #20]
 8000320:	697a      	ldr	r2, [r7, #20]
 8000322:	687b      	ldr	r3, [r7, #4]
 8000324:	429a      	cmp	r2, r3
 8000326:	dbf0      	blt.n	800030a <_read+0x12>
	}

return len;
 8000328:	687b      	ldr	r3, [r7, #4]
}
 800032a:	4618      	mov	r0, r3
 800032c:	3718      	adds	r7, #24
 800032e:	46bd      	mov	sp, r7
 8000330:	bd80      	pop	{r7, pc}

08000332 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000332:	b580      	push	{r7, lr}
 8000334:	b086      	sub	sp, #24
 8000336:	af00      	add	r7, sp, #0
 8000338:	60f8      	str	r0, [r7, #12]
 800033a:	60b9      	str	r1, [r7, #8]
 800033c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800033e:	2300      	movs	r3, #0
 8000340:	617b      	str	r3, [r7, #20]
 8000342:	e009      	b.n	8000358 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000344:	68bb      	ldr	r3, [r7, #8]
 8000346:	1c5a      	adds	r2, r3, #1
 8000348:	60ba      	str	r2, [r7, #8]
 800034a:	781b      	ldrb	r3, [r3, #0]
 800034c:	4618      	mov	r0, r3
 800034e:	f000 f8ed 	bl	800052c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000352:	697b      	ldr	r3, [r7, #20]
 8000354:	3301      	adds	r3, #1
 8000356:	617b      	str	r3, [r7, #20]
 8000358:	697a      	ldr	r2, [r7, #20]
 800035a:	687b      	ldr	r3, [r7, #4]
 800035c:	429a      	cmp	r2, r3
 800035e:	dbf1      	blt.n	8000344 <_write+0x12>
	}
	return len;
 8000360:	687b      	ldr	r3, [r7, #4]
}
 8000362:	4618      	mov	r0, r3
 8000364:	3718      	adds	r7, #24
 8000366:	46bd      	mov	sp, r7
 8000368:	bd80      	pop	{r7, pc}

0800036a <_close>:

int _close(int file)
{
 800036a:	b480      	push	{r7}
 800036c:	b083      	sub	sp, #12
 800036e:	af00      	add	r7, sp, #0
 8000370:	6078      	str	r0, [r7, #4]
	return -1;
 8000372:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000376:	4618      	mov	r0, r3
 8000378:	370c      	adds	r7, #12
 800037a:	46bd      	mov	sp, r7
 800037c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000380:	4770      	bx	lr

08000382 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000382:	b480      	push	{r7}
 8000384:	b083      	sub	sp, #12
 8000386:	af00      	add	r7, sp, #0
 8000388:	6078      	str	r0, [r7, #4]
 800038a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800038c:	683b      	ldr	r3, [r7, #0]
 800038e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000392:	605a      	str	r2, [r3, #4]
	return 0;
 8000394:	2300      	movs	r3, #0
}
 8000396:	4618      	mov	r0, r3
 8000398:	370c      	adds	r7, #12
 800039a:	46bd      	mov	sp, r7
 800039c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003a0:	4770      	bx	lr

080003a2 <_isatty>:

int _isatty(int file)
{
 80003a2:	b480      	push	{r7}
 80003a4:	b083      	sub	sp, #12
 80003a6:	af00      	add	r7, sp, #0
 80003a8:	6078      	str	r0, [r7, #4]
	return 1;
 80003aa:	2301      	movs	r3, #1
}
 80003ac:	4618      	mov	r0, r3
 80003ae:	370c      	adds	r7, #12
 80003b0:	46bd      	mov	sp, r7
 80003b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003b6:	4770      	bx	lr

080003b8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80003b8:	b480      	push	{r7}
 80003ba:	b085      	sub	sp, #20
 80003bc:	af00      	add	r7, sp, #0
 80003be:	60f8      	str	r0, [r7, #12]
 80003c0:	60b9      	str	r1, [r7, #8]
 80003c2:	607a      	str	r2, [r7, #4]
	return 0;
 80003c4:	2300      	movs	r3, #0
}
 80003c6:	4618      	mov	r0, r3
 80003c8:	3714      	adds	r7, #20
 80003ca:	46bd      	mov	sp, r7
 80003cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d0:	4770      	bx	lr
	...

080003d4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80003d4:	b580      	push	{r7, lr}
 80003d6:	b086      	sub	sp, #24
 80003d8:	af00      	add	r7, sp, #0
 80003da:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80003dc:	4a14      	ldr	r2, [pc, #80]	; (8000430 <_sbrk+0x5c>)
 80003de:	4b15      	ldr	r3, [pc, #84]	; (8000434 <_sbrk+0x60>)
 80003e0:	1ad3      	subs	r3, r2, r3
 80003e2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80003e4:	697b      	ldr	r3, [r7, #20]
 80003e6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80003e8:	4b13      	ldr	r3, [pc, #76]	; (8000438 <_sbrk+0x64>)
 80003ea:	681b      	ldr	r3, [r3, #0]
 80003ec:	2b00      	cmp	r3, #0
 80003ee:	d102      	bne.n	80003f6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80003f0:	4b11      	ldr	r3, [pc, #68]	; (8000438 <_sbrk+0x64>)
 80003f2:	4a12      	ldr	r2, [pc, #72]	; (800043c <_sbrk+0x68>)
 80003f4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80003f6:	4b10      	ldr	r3, [pc, #64]	; (8000438 <_sbrk+0x64>)
 80003f8:	681a      	ldr	r2, [r3, #0]
 80003fa:	687b      	ldr	r3, [r7, #4]
 80003fc:	4413      	add	r3, r2
 80003fe:	693a      	ldr	r2, [r7, #16]
 8000400:	429a      	cmp	r2, r3
 8000402:	d207      	bcs.n	8000414 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000404:	f000 f956 	bl	80006b4 <__errno>
 8000408:	4603      	mov	r3, r0
 800040a:	220c      	movs	r2, #12
 800040c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800040e:	f04f 33ff 	mov.w	r3, #4294967295
 8000412:	e009      	b.n	8000428 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000414:	4b08      	ldr	r3, [pc, #32]	; (8000438 <_sbrk+0x64>)
 8000416:	681b      	ldr	r3, [r3, #0]
 8000418:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800041a:	4b07      	ldr	r3, [pc, #28]	; (8000438 <_sbrk+0x64>)
 800041c:	681a      	ldr	r2, [r3, #0]
 800041e:	687b      	ldr	r3, [r7, #4]
 8000420:	4413      	add	r3, r2
 8000422:	4a05      	ldr	r2, [pc, #20]	; (8000438 <_sbrk+0x64>)
 8000424:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000426:	68fb      	ldr	r3, [r7, #12]
}
 8000428:	4618      	mov	r0, r3
 800042a:	3718      	adds	r7, #24
 800042c:	46bd      	mov	sp, r7
 800042e:	bd80      	pop	{r7, pc}
 8000430:	20020000 	.word	0x20020000
 8000434:	00000400 	.word	0x00000400
 8000438:	20000084 	.word	0x20000084
 800043c:	200000a8 	.word	0x200000a8

08000440 <Delay>:
volatile uint32_t g_curr_tick_prime;
volatile uint32_t tick_freq = 1;

/* Parameter takes value in seconds */
void Delay(uint32_t delay)
{
 8000440:	b580      	push	{r7, lr}
 8000442:	b084      	sub	sp, #16
 8000444:	af00      	add	r7, sp, #0
 8000446:	6078      	str	r0, [r7, #4]
	uint32_t tickStart = Get_Tick();
 8000448:	f000 f82e 	bl	80004a8 <Get_Tick>
 800044c:	60b8      	str	r0, [r7, #8]
	uint32_t wait = delay;
 800044e:	687b      	ldr	r3, [r7, #4]
 8000450:	60fb      	str	r3, [r7, #12]
	if(wait < MAX_DELAY)
 8000452:	68fb      	ldr	r3, [r7, #12]
 8000454:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000458:	d004      	beq.n	8000464 <Delay+0x24>
	{
		wait += tick_freq;
 800045a:	4b09      	ldr	r3, [pc, #36]	; (8000480 <Delay+0x40>)
 800045c:	681b      	ldr	r3, [r3, #0]
 800045e:	68fa      	ldr	r2, [r7, #12]
 8000460:	4413      	add	r3, r2
 8000462:	60fb      	str	r3, [r7, #12]
	}

	while((Get_Tick() - tickStart) < wait){}
 8000464:	bf00      	nop
 8000466:	f000 f81f 	bl	80004a8 <Get_Tick>
 800046a:	4602      	mov	r2, r0
 800046c:	68bb      	ldr	r3, [r7, #8]
 800046e:	1ad3      	subs	r3, r2, r3
 8000470:	68fa      	ldr	r2, [r7, #12]
 8000472:	429a      	cmp	r2, r3
 8000474:	d8f7      	bhi.n	8000466 <Delay+0x26>

}
 8000476:	bf00      	nop
 8000478:	bf00      	nop
 800047a:	3710      	adds	r7, #16
 800047c:	46bd      	mov	sp, r7
 800047e:	bd80      	pop	{r7, pc}
 8000480:	20000000 	.word	0x20000000

08000484 <Tick_Increment>:

void Tick_Increment(void)
{
 8000484:	b480      	push	{r7}
 8000486:	af00      	add	r7, sp, #0
	g_curr_tick += tick_freq;
 8000488:	4b05      	ldr	r3, [pc, #20]	; (80004a0 <Tick_Increment+0x1c>)
 800048a:	681a      	ldr	r2, [r3, #0]
 800048c:	4b05      	ldr	r3, [pc, #20]	; (80004a4 <Tick_Increment+0x20>)
 800048e:	681b      	ldr	r3, [r3, #0]
 8000490:	4413      	add	r3, r2
 8000492:	4a04      	ldr	r2, [pc, #16]	; (80004a4 <Tick_Increment+0x20>)
 8000494:	6013      	str	r3, [r2, #0]
}
 8000496:	bf00      	nop
 8000498:	46bd      	mov	sp, r7
 800049a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800049e:	4770      	bx	lr
 80004a0:	20000000 	.word	0x20000000
 80004a4:	20000090 	.word	0x20000090

080004a8 <Get_Tick>:

uint32_t Get_Tick(void)
{
 80004a8:	b480      	push	{r7}
 80004aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004ac:	b672      	cpsid	i
}
 80004ae:	bf00      	nop
	__disable_irq();
	g_curr_tick_prime = g_curr_tick;
 80004b0:	4b06      	ldr	r3, [pc, #24]	; (80004cc <Get_Tick+0x24>)
 80004b2:	681b      	ldr	r3, [r3, #0]
 80004b4:	4a06      	ldr	r2, [pc, #24]	; (80004d0 <Get_Tick+0x28>)
 80004b6:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80004b8:	b662      	cpsie	i
}
 80004ba:	bf00      	nop
	__enable_irq();

	return g_curr_tick_prime;
 80004bc:	4b04      	ldr	r3, [pc, #16]	; (80004d0 <Get_Tick+0x28>)
 80004be:	681b      	ldr	r3, [r3, #0]
}
 80004c0:	4618      	mov	r0, r3
 80004c2:	46bd      	mov	sp, r7
 80004c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop
 80004cc:	20000090 	.word	0x20000090
 80004d0:	20000094 	.word	0x20000094

080004d4 <TIME_BASE_INIT>:

void TIME_BASE_INIT(void)
{
 80004d4:	b480      	push	{r7}
 80004d6:	af00      	add	r7, sp, #0
	/* Reload the timer with number of cycles per second */

	/* I wrote -1 because it becomes from 0 */
	SysTick->LOAD = ONE_SEC_LOAD - 1 ;
 80004d8:	4b0f      	ldr	r3, [pc, #60]	; (8000518 <TIME_BASE_INIT+0x44>)
 80004da:	4a10      	ldr	r2, [pc, #64]	; (800051c <TIME_BASE_INIT+0x48>)
 80004dc:	605a      	str	r2, [r3, #4]

	/* Clear Systick Current value register */
	SysTick->VAL = 0 ;
 80004de:	4b0e      	ldr	r3, [pc, #56]	; (8000518 <TIME_BASE_INIT+0x44>)
 80004e0:	2200      	movs	r2, #0
 80004e2:	609a      	str	r2, [r3, #8]
	/* Select Internal Clock Source */
	SysTick->CTRL |=  CTRL_CLCKSRC ;
 80004e4:	4b0c      	ldr	r3, [pc, #48]	; (8000518 <TIME_BASE_INIT+0x44>)
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	4a0b      	ldr	r2, [pc, #44]	; (8000518 <TIME_BASE_INIT+0x44>)
 80004ea:	f043 0304 	orr.w	r3, r3, #4
 80004ee:	6013      	str	r3, [r2, #0]

	/* Enable Interrupt */
	SysTick->CTRL |= CTRL_TICK_IT;
 80004f0:	4b09      	ldr	r3, [pc, #36]	; (8000518 <TIME_BASE_INIT+0x44>)
 80004f2:	681b      	ldr	r3, [r3, #0]
 80004f4:	4a08      	ldr	r2, [pc, #32]	; (8000518 <TIME_BASE_INIT+0x44>)
 80004f6:	f043 0302 	orr.w	r3, r3, #2
 80004fa:	6013      	str	r3, [r2, #0]

	/* Enable Systick */
	SysTick->CTRL |= CTRL_EN;
 80004fc:	4b06      	ldr	r3, [pc, #24]	; (8000518 <TIME_BASE_INIT+0x44>)
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	4a05      	ldr	r2, [pc, #20]	; (8000518 <TIME_BASE_INIT+0x44>)
 8000502:	f043 0301 	orr.w	r3, r3, #1
 8000506:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8000508:	b662      	cpsie	i
}
 800050a:	bf00      	nop

	/* Enable Global Interrupt */
	__enable_irq();

}
 800050c:	bf00      	nop
 800050e:	46bd      	mov	sp, r7
 8000510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000514:	4770      	bx	lr
 8000516:	bf00      	nop
 8000518:	e000e010 	.word	0xe000e010
 800051c:	00f423ff 	.word	0x00f423ff

08000520 <SysTick_Handler>:

void SysTick_Handler(void)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	af00      	add	r7, sp, #0
	Tick_Increment();
 8000524:	f7ff ffae 	bl	8000484 <Tick_Increment>
}
 8000528:	bf00      	nop
 800052a:	bd80      	pop	{r7, pc}

0800052c <__io_putchar>:
static void UART_SET_BAUDRATE(uint32_t peripheralClock, uint32_t baudRate);

static void UART_WRITE(int ch);

int __io_putchar(int ch)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	b082      	sub	sp, #8
 8000530:	af00      	add	r7, sp, #0
 8000532:	6078      	str	r0, [r7, #4]
	UART_WRITE(ch);
 8000534:	6878      	ldr	r0, [r7, #4]
 8000536:	f000 f853 	bl	80005e0 <UART_WRITE>
	return ch;
 800053a:	687b      	ldr	r3, [r7, #4]
}
 800053c:	4618      	mov	r0, r3
 800053e:	3708      	adds	r7, #8
 8000540:	46bd      	mov	sp, r7
 8000542:	bd80      	pop	{r7, pc}

08000544 <UART_TRANSMIT_Config>:
void UART_TRANSMIT_Config(void)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	af00      	add	r7, sp, #0
	/* Enable Clock Access to GPIOA */
	/* USART2_TX -> PA2 */
	RCC->AHB1ENR |= GPIOA_CLOCK;
 8000548:	4b21      	ldr	r3, [pc, #132]	; (80005d0 <UART_TRANSMIT_Config+0x8c>)
 800054a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800054c:	4a20      	ldr	r2, [pc, #128]	; (80005d0 <UART_TRANSMIT_Config+0x8c>)
 800054e:	f043 0301 	orr.w	r3, r3, #1
 8000552:	6313      	str	r3, [r2, #48]	; 0x30

	/* Set PA2 pin as alternate function */
	GPIOA->MODER &= ~(1U<<4);
 8000554:	4b1f      	ldr	r3, [pc, #124]	; (80005d4 <UART_TRANSMIT_Config+0x90>)
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	4a1e      	ldr	r2, [pc, #120]	; (80005d4 <UART_TRANSMIT_Config+0x90>)
 800055a:	f023 0310 	bic.w	r3, r3, #16
 800055e:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |=  (1U<<5);
 8000560:	4b1c      	ldr	r3, [pc, #112]	; (80005d4 <UART_TRANSMIT_Config+0x90>)
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	4a1b      	ldr	r2, [pc, #108]	; (80005d4 <UART_TRANSMIT_Config+0x90>)
 8000566:	f043 0320 	orr.w	r3, r3, #32
 800056a:	6013      	str	r3, [r2, #0]


	/* Set alternate function type to AF7(UART2_TX -> From Alternate Function Mapping) */
	/* ARF[0] -> ARFLow ARF[1] -> ARFHigh */
	GPIOA->AFR[0] |= (1U<<8);
 800056c:	4b19      	ldr	r3, [pc, #100]	; (80005d4 <UART_TRANSMIT_Config+0x90>)
 800056e:	6a1b      	ldr	r3, [r3, #32]
 8000570:	4a18      	ldr	r2, [pc, #96]	; (80005d4 <UART_TRANSMIT_Config+0x90>)
 8000572:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000576:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1U<<9);
 8000578:	4b16      	ldr	r3, [pc, #88]	; (80005d4 <UART_TRANSMIT_Config+0x90>)
 800057a:	6a1b      	ldr	r3, [r3, #32]
 800057c:	4a15      	ldr	r2, [pc, #84]	; (80005d4 <UART_TRANSMIT_Config+0x90>)
 800057e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000582:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1U<<10);
 8000584:	4b13      	ldr	r3, [pc, #76]	; (80005d4 <UART_TRANSMIT_Config+0x90>)
 8000586:	6a1b      	ldr	r3, [r3, #32]
 8000588:	4a12      	ldr	r2, [pc, #72]	; (80005d4 <UART_TRANSMIT_Config+0x90>)
 800058a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800058e:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &= ~(1U<<11); /* GPIOA->ARF[0] &= (1U<<11) */
 8000590:	4b10      	ldr	r3, [pc, #64]	; (80005d4 <UART_TRANSMIT_Config+0x90>)
 8000592:	6a1b      	ldr	r3, [r3, #32]
 8000594:	4a0f      	ldr	r2, [pc, #60]	; (80005d4 <UART_TRANSMIT_Config+0x90>)
 8000596:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800059a:	6213      	str	r3, [r2, #32]

	/* Enable Clock Access to UART*/
	RCC->APB1ENR |= UART2_EN;
 800059c:	4b0c      	ldr	r3, [pc, #48]	; (80005d0 <UART_TRANSMIT_Config+0x8c>)
 800059e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005a0:	4a0b      	ldr	r2, [pc, #44]	; (80005d0 <UART_TRANSMIT_Config+0x8c>)
 80005a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005a6:	6413      	str	r3, [r2, #64]	; 0x40
	/* Configure boundrate */
	UART_SET_BAUDRATE(APB1_CLOCK,UART_BAUDRATE);
 80005a8:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 80005ac:	480a      	ldr	r0, [pc, #40]	; (80005d8 <UART_TRANSMIT_Config+0x94>)
 80005ae:	f000 f82f 	bl	8000610 <UART_SET_BAUDRATE>
	/* Configure Transfer Direction */
	USART2->CR1 |= UART_CR1_REGISTER_TE;
 80005b2:	4b0a      	ldr	r3, [pc, #40]	; (80005dc <UART_TRANSMIT_Config+0x98>)
 80005b4:	68db      	ldr	r3, [r3, #12]
 80005b6:	4a09      	ldr	r2, [pc, #36]	; (80005dc <UART_TRANSMIT_Config+0x98>)
 80005b8:	f043 0308 	orr.w	r3, r3, #8
 80005bc:	60d3      	str	r3, [r2, #12]

	/* Enable UART Module */
	USART2->CR1 |= UART_CR1_ENABLE;
 80005be:	4b07      	ldr	r3, [pc, #28]	; (80005dc <UART_TRANSMIT_Config+0x98>)
 80005c0:	68db      	ldr	r3, [r3, #12]
 80005c2:	4a06      	ldr	r2, [pc, #24]	; (80005dc <UART_TRANSMIT_Config+0x98>)
 80005c4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80005c8:	60d3      	str	r3, [r2, #12]
}
 80005ca:	bf00      	nop
 80005cc:	bd80      	pop	{r7, pc}
 80005ce:	bf00      	nop
 80005d0:	40023800 	.word	0x40023800
 80005d4:	40020000 	.word	0x40020000
 80005d8:	00f42400 	.word	0x00f42400
 80005dc:	40004400 	.word	0x40004400

080005e0 <UART_WRITE>:

static void UART_WRITE(int ch)
{
 80005e0:	b480      	push	{r7}
 80005e2:	b083      	sub	sp, #12
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]
	/* Make sure the transmit data register is empty */
	while(!(USART2->SR & UART_ST_TXE)){}
 80005e8:	bf00      	nop
 80005ea:	4b08      	ldr	r3, [pc, #32]	; (800060c <UART_WRITE+0x2c>)
 80005ec:	681b      	ldr	r3, [r3, #0]
 80005ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d0f9      	beq.n	80005ea <UART_WRITE+0xa>

	/* Write to transmit data register */
	USART2->DR = (ch & 0xFF);
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	4a04      	ldr	r2, [pc, #16]	; (800060c <UART_WRITE+0x2c>)
 80005fa:	b2db      	uxtb	r3, r3
 80005fc:	6053      	str	r3, [r2, #4]
}
 80005fe:	bf00      	nop
 8000600:	370c      	adds	r7, #12
 8000602:	46bd      	mov	sp, r7
 8000604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000608:	4770      	bx	lr
 800060a:	bf00      	nop
 800060c:	40004400 	.word	0x40004400

08000610 <UART_SET_BAUDRATE>:


static void UART_SET_BAUDRATE(uint32_t peripheralClock, uint32_t baudRate)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b082      	sub	sp, #8
 8000614:	af00      	add	r7, sp, #0
 8000616:	6078      	str	r0, [r7, #4]
 8000618:	6039      	str	r1, [r7, #0]
	USART2->BRR = COMPUTE_UART_BAUDRATE(peripheralClock, baudRate);
 800061a:	6839      	ldr	r1, [r7, #0]
 800061c:	6878      	ldr	r0, [r7, #4]
 800061e:	f000 f80b 	bl	8000638 <COMPUTE_UART_BAUDRATE>
 8000622:	4603      	mov	r3, r0
 8000624:	461a      	mov	r2, r3
 8000626:	4b03      	ldr	r3, [pc, #12]	; (8000634 <UART_SET_BAUDRATE+0x24>)
 8000628:	609a      	str	r2, [r3, #8]
}
 800062a:	bf00      	nop
 800062c:	3708      	adds	r7, #8
 800062e:	46bd      	mov	sp, r7
 8000630:	bd80      	pop	{r7, pc}
 8000632:	bf00      	nop
 8000634:	40004400 	.word	0x40004400

08000638 <COMPUTE_UART_BAUDRATE>:


static uint16_t COMPUTE_UART_BAUDRATE(uint32_t peripheralClock, uint32_t baudRate)
{
 8000638:	b480      	push	{r7}
 800063a:	b083      	sub	sp, #12
 800063c:	af00      	add	r7, sp, #0
 800063e:	6078      	str	r0, [r7, #4]
 8000640:	6039      	str	r1, [r7, #0]
	return ((peripheralClock + (baudRate / 2))/ baudRate);
 8000642:	683b      	ldr	r3, [r7, #0]
 8000644:	085a      	lsrs	r2, r3, #1
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	441a      	add	r2, r3
 800064a:	683b      	ldr	r3, [r7, #0]
 800064c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000650:	b29b      	uxth	r3, r3

}
 8000652:	4618      	mov	r0, r3
 8000654:	370c      	adds	r7, #12
 8000656:	46bd      	mov	sp, r7
 8000658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065c:	4770      	bx	lr
	...

08000660 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000660:	480d      	ldr	r0, [pc, #52]	; (8000698 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000662:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000664:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000668:	480c      	ldr	r0, [pc, #48]	; (800069c <LoopForever+0x6>)
  ldr r1, =_edata
 800066a:	490d      	ldr	r1, [pc, #52]	; (80006a0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800066c:	4a0d      	ldr	r2, [pc, #52]	; (80006a4 <LoopForever+0xe>)
  movs r3, #0
 800066e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000670:	e002      	b.n	8000678 <LoopCopyDataInit>

08000672 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000672:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000674:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000676:	3304      	adds	r3, #4

08000678 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000678:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800067a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800067c:	d3f9      	bcc.n	8000672 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800067e:	4a0a      	ldr	r2, [pc, #40]	; (80006a8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000680:	4c0a      	ldr	r4, [pc, #40]	; (80006ac <LoopForever+0x16>)
  movs r3, #0
 8000682:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000684:	e001      	b.n	800068a <LoopFillZerobss>

08000686 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000686:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000688:	3204      	adds	r2, #4

0800068a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800068a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800068c:	d3fb      	bcc.n	8000686 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800068e:	f000 f817 	bl	80006c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000692:	f7ff fe1d 	bl	80002d0 <main>

08000696 <LoopForever>:

LoopForever:
    b LoopForever
 8000696:	e7fe      	b.n	8000696 <LoopForever>
  ldr   r0, =_estack
 8000698:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800069c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006a0:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80006a4:	08001694 	.word	0x08001694
  ldr r2, =_sbss
 80006a8:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80006ac:	200000a8 	.word	0x200000a8

080006b0 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80006b0:	e7fe      	b.n	80006b0 <ADC_IRQHandler>
	...

080006b4 <__errno>:
 80006b4:	4b01      	ldr	r3, [pc, #4]	; (80006bc <__errno+0x8>)
 80006b6:	6818      	ldr	r0, [r3, #0]
 80006b8:	4770      	bx	lr
 80006ba:	bf00      	nop
 80006bc:	20000004 	.word	0x20000004

080006c0 <__libc_init_array>:
 80006c0:	b570      	push	{r4, r5, r6, lr}
 80006c2:	4d0d      	ldr	r5, [pc, #52]	; (80006f8 <__libc_init_array+0x38>)
 80006c4:	4c0d      	ldr	r4, [pc, #52]	; (80006fc <__libc_init_array+0x3c>)
 80006c6:	1b64      	subs	r4, r4, r5
 80006c8:	10a4      	asrs	r4, r4, #2
 80006ca:	2600      	movs	r6, #0
 80006cc:	42a6      	cmp	r6, r4
 80006ce:	d109      	bne.n	80006e4 <__libc_init_array+0x24>
 80006d0:	4d0b      	ldr	r5, [pc, #44]	; (8000700 <__libc_init_array+0x40>)
 80006d2:	4c0c      	ldr	r4, [pc, #48]	; (8000704 <__libc_init_array+0x44>)
 80006d4:	f000 ff76 	bl	80015c4 <_init>
 80006d8:	1b64      	subs	r4, r4, r5
 80006da:	10a4      	asrs	r4, r4, #2
 80006dc:	2600      	movs	r6, #0
 80006de:	42a6      	cmp	r6, r4
 80006e0:	d105      	bne.n	80006ee <__libc_init_array+0x2e>
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80006e8:	4798      	blx	r3
 80006ea:	3601      	adds	r6, #1
 80006ec:	e7ee      	b.n	80006cc <__libc_init_array+0xc>
 80006ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80006f2:	4798      	blx	r3
 80006f4:	3601      	adds	r6, #1
 80006f6:	e7f2      	b.n	80006de <__libc_init_array+0x1e>
 80006f8:	0800168c 	.word	0x0800168c
 80006fc:	0800168c 	.word	0x0800168c
 8000700:	0800168c 	.word	0x0800168c
 8000704:	08001690 	.word	0x08001690

08000708 <memset>:
 8000708:	4402      	add	r2, r0
 800070a:	4603      	mov	r3, r0
 800070c:	4293      	cmp	r3, r2
 800070e:	d100      	bne.n	8000712 <memset+0xa>
 8000710:	4770      	bx	lr
 8000712:	f803 1b01 	strb.w	r1, [r3], #1
 8000716:	e7f9      	b.n	800070c <memset+0x4>

08000718 <iprintf>:
 8000718:	b40f      	push	{r0, r1, r2, r3}
 800071a:	4b0a      	ldr	r3, [pc, #40]	; (8000744 <iprintf+0x2c>)
 800071c:	b513      	push	{r0, r1, r4, lr}
 800071e:	681c      	ldr	r4, [r3, #0]
 8000720:	b124      	cbz	r4, 800072c <iprintf+0x14>
 8000722:	69a3      	ldr	r3, [r4, #24]
 8000724:	b913      	cbnz	r3, 800072c <iprintf+0x14>
 8000726:	4620      	mov	r0, r4
 8000728:	f000 f866 	bl	80007f8 <__sinit>
 800072c:	ab05      	add	r3, sp, #20
 800072e:	9a04      	ldr	r2, [sp, #16]
 8000730:	68a1      	ldr	r1, [r4, #8]
 8000732:	9301      	str	r3, [sp, #4]
 8000734:	4620      	mov	r0, r4
 8000736:	f000 f983 	bl	8000a40 <_vfiprintf_r>
 800073a:	b002      	add	sp, #8
 800073c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000740:	b004      	add	sp, #16
 8000742:	4770      	bx	lr
 8000744:	20000004 	.word	0x20000004

08000748 <std>:
 8000748:	2300      	movs	r3, #0
 800074a:	b510      	push	{r4, lr}
 800074c:	4604      	mov	r4, r0
 800074e:	e9c0 3300 	strd	r3, r3, [r0]
 8000752:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000756:	6083      	str	r3, [r0, #8]
 8000758:	8181      	strh	r1, [r0, #12]
 800075a:	6643      	str	r3, [r0, #100]	; 0x64
 800075c:	81c2      	strh	r2, [r0, #14]
 800075e:	6183      	str	r3, [r0, #24]
 8000760:	4619      	mov	r1, r3
 8000762:	2208      	movs	r2, #8
 8000764:	305c      	adds	r0, #92	; 0x5c
 8000766:	f7ff ffcf 	bl	8000708 <memset>
 800076a:	4b05      	ldr	r3, [pc, #20]	; (8000780 <std+0x38>)
 800076c:	6263      	str	r3, [r4, #36]	; 0x24
 800076e:	4b05      	ldr	r3, [pc, #20]	; (8000784 <std+0x3c>)
 8000770:	62a3      	str	r3, [r4, #40]	; 0x28
 8000772:	4b05      	ldr	r3, [pc, #20]	; (8000788 <std+0x40>)
 8000774:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000776:	4b05      	ldr	r3, [pc, #20]	; (800078c <std+0x44>)
 8000778:	6224      	str	r4, [r4, #32]
 800077a:	6323      	str	r3, [r4, #48]	; 0x30
 800077c:	bd10      	pop	{r4, pc}
 800077e:	bf00      	nop
 8000780:	08000fe9 	.word	0x08000fe9
 8000784:	0800100b 	.word	0x0800100b
 8000788:	08001043 	.word	0x08001043
 800078c:	08001067 	.word	0x08001067

08000790 <_cleanup_r>:
 8000790:	4901      	ldr	r1, [pc, #4]	; (8000798 <_cleanup_r+0x8>)
 8000792:	f000 b8af 	b.w	80008f4 <_fwalk_reent>
 8000796:	bf00      	nop
 8000798:	08001341 	.word	0x08001341

0800079c <__sfmoreglue>:
 800079c:	b570      	push	{r4, r5, r6, lr}
 800079e:	1e4a      	subs	r2, r1, #1
 80007a0:	2568      	movs	r5, #104	; 0x68
 80007a2:	4355      	muls	r5, r2
 80007a4:	460e      	mov	r6, r1
 80007a6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80007aa:	f000 f8c5 	bl	8000938 <_malloc_r>
 80007ae:	4604      	mov	r4, r0
 80007b0:	b140      	cbz	r0, 80007c4 <__sfmoreglue+0x28>
 80007b2:	2100      	movs	r1, #0
 80007b4:	e9c0 1600 	strd	r1, r6, [r0]
 80007b8:	300c      	adds	r0, #12
 80007ba:	60a0      	str	r0, [r4, #8]
 80007bc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80007c0:	f7ff ffa2 	bl	8000708 <memset>
 80007c4:	4620      	mov	r0, r4
 80007c6:	bd70      	pop	{r4, r5, r6, pc}

080007c8 <__sfp_lock_acquire>:
 80007c8:	4801      	ldr	r0, [pc, #4]	; (80007d0 <__sfp_lock_acquire+0x8>)
 80007ca:	f000 b8b3 	b.w	8000934 <__retarget_lock_acquire_recursive>
 80007ce:	bf00      	nop
 80007d0:	200000a0 	.word	0x200000a0

080007d4 <__sfp_lock_release>:
 80007d4:	4801      	ldr	r0, [pc, #4]	; (80007dc <__sfp_lock_release+0x8>)
 80007d6:	f000 b8ae 	b.w	8000936 <__retarget_lock_release_recursive>
 80007da:	bf00      	nop
 80007dc:	200000a0 	.word	0x200000a0

080007e0 <__sinit_lock_acquire>:
 80007e0:	4801      	ldr	r0, [pc, #4]	; (80007e8 <__sinit_lock_acquire+0x8>)
 80007e2:	f000 b8a7 	b.w	8000934 <__retarget_lock_acquire_recursive>
 80007e6:	bf00      	nop
 80007e8:	2000009b 	.word	0x2000009b

080007ec <__sinit_lock_release>:
 80007ec:	4801      	ldr	r0, [pc, #4]	; (80007f4 <__sinit_lock_release+0x8>)
 80007ee:	f000 b8a2 	b.w	8000936 <__retarget_lock_release_recursive>
 80007f2:	bf00      	nop
 80007f4:	2000009b 	.word	0x2000009b

080007f8 <__sinit>:
 80007f8:	b510      	push	{r4, lr}
 80007fa:	4604      	mov	r4, r0
 80007fc:	f7ff fff0 	bl	80007e0 <__sinit_lock_acquire>
 8000800:	69a3      	ldr	r3, [r4, #24]
 8000802:	b11b      	cbz	r3, 800080c <__sinit+0x14>
 8000804:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000808:	f7ff bff0 	b.w	80007ec <__sinit_lock_release>
 800080c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8000810:	6523      	str	r3, [r4, #80]	; 0x50
 8000812:	4b13      	ldr	r3, [pc, #76]	; (8000860 <__sinit+0x68>)
 8000814:	4a13      	ldr	r2, [pc, #76]	; (8000864 <__sinit+0x6c>)
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	62a2      	str	r2, [r4, #40]	; 0x28
 800081a:	42a3      	cmp	r3, r4
 800081c:	bf04      	itt	eq
 800081e:	2301      	moveq	r3, #1
 8000820:	61a3      	streq	r3, [r4, #24]
 8000822:	4620      	mov	r0, r4
 8000824:	f000 f820 	bl	8000868 <__sfp>
 8000828:	6060      	str	r0, [r4, #4]
 800082a:	4620      	mov	r0, r4
 800082c:	f000 f81c 	bl	8000868 <__sfp>
 8000830:	60a0      	str	r0, [r4, #8]
 8000832:	4620      	mov	r0, r4
 8000834:	f000 f818 	bl	8000868 <__sfp>
 8000838:	2200      	movs	r2, #0
 800083a:	60e0      	str	r0, [r4, #12]
 800083c:	2104      	movs	r1, #4
 800083e:	6860      	ldr	r0, [r4, #4]
 8000840:	f7ff ff82 	bl	8000748 <std>
 8000844:	68a0      	ldr	r0, [r4, #8]
 8000846:	2201      	movs	r2, #1
 8000848:	2109      	movs	r1, #9
 800084a:	f7ff ff7d 	bl	8000748 <std>
 800084e:	68e0      	ldr	r0, [r4, #12]
 8000850:	2202      	movs	r2, #2
 8000852:	2112      	movs	r1, #18
 8000854:	f7ff ff78 	bl	8000748 <std>
 8000858:	2301      	movs	r3, #1
 800085a:	61a3      	str	r3, [r4, #24]
 800085c:	e7d2      	b.n	8000804 <__sinit+0xc>
 800085e:	bf00      	nop
 8000860:	080015f4 	.word	0x080015f4
 8000864:	08000791 	.word	0x08000791

08000868 <__sfp>:
 8000868:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800086a:	4607      	mov	r7, r0
 800086c:	f7ff ffac 	bl	80007c8 <__sfp_lock_acquire>
 8000870:	4b1e      	ldr	r3, [pc, #120]	; (80008ec <__sfp+0x84>)
 8000872:	681e      	ldr	r6, [r3, #0]
 8000874:	69b3      	ldr	r3, [r6, #24]
 8000876:	b913      	cbnz	r3, 800087e <__sfp+0x16>
 8000878:	4630      	mov	r0, r6
 800087a:	f7ff ffbd 	bl	80007f8 <__sinit>
 800087e:	3648      	adds	r6, #72	; 0x48
 8000880:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8000884:	3b01      	subs	r3, #1
 8000886:	d503      	bpl.n	8000890 <__sfp+0x28>
 8000888:	6833      	ldr	r3, [r6, #0]
 800088a:	b30b      	cbz	r3, 80008d0 <__sfp+0x68>
 800088c:	6836      	ldr	r6, [r6, #0]
 800088e:	e7f7      	b.n	8000880 <__sfp+0x18>
 8000890:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8000894:	b9d5      	cbnz	r5, 80008cc <__sfp+0x64>
 8000896:	4b16      	ldr	r3, [pc, #88]	; (80008f0 <__sfp+0x88>)
 8000898:	60e3      	str	r3, [r4, #12]
 800089a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800089e:	6665      	str	r5, [r4, #100]	; 0x64
 80008a0:	f000 f847 	bl	8000932 <__retarget_lock_init_recursive>
 80008a4:	f7ff ff96 	bl	80007d4 <__sfp_lock_release>
 80008a8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80008ac:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80008b0:	6025      	str	r5, [r4, #0]
 80008b2:	61a5      	str	r5, [r4, #24]
 80008b4:	2208      	movs	r2, #8
 80008b6:	4629      	mov	r1, r5
 80008b8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80008bc:	f7ff ff24 	bl	8000708 <memset>
 80008c0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80008c4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80008c8:	4620      	mov	r0, r4
 80008ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80008cc:	3468      	adds	r4, #104	; 0x68
 80008ce:	e7d9      	b.n	8000884 <__sfp+0x1c>
 80008d0:	2104      	movs	r1, #4
 80008d2:	4638      	mov	r0, r7
 80008d4:	f7ff ff62 	bl	800079c <__sfmoreglue>
 80008d8:	4604      	mov	r4, r0
 80008da:	6030      	str	r0, [r6, #0]
 80008dc:	2800      	cmp	r0, #0
 80008de:	d1d5      	bne.n	800088c <__sfp+0x24>
 80008e0:	f7ff ff78 	bl	80007d4 <__sfp_lock_release>
 80008e4:	230c      	movs	r3, #12
 80008e6:	603b      	str	r3, [r7, #0]
 80008e8:	e7ee      	b.n	80008c8 <__sfp+0x60>
 80008ea:	bf00      	nop
 80008ec:	080015f4 	.word	0x080015f4
 80008f0:	ffff0001 	.word	0xffff0001

080008f4 <_fwalk_reent>:
 80008f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80008f8:	4606      	mov	r6, r0
 80008fa:	4688      	mov	r8, r1
 80008fc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8000900:	2700      	movs	r7, #0
 8000902:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000906:	f1b9 0901 	subs.w	r9, r9, #1
 800090a:	d505      	bpl.n	8000918 <_fwalk_reent+0x24>
 800090c:	6824      	ldr	r4, [r4, #0]
 800090e:	2c00      	cmp	r4, #0
 8000910:	d1f7      	bne.n	8000902 <_fwalk_reent+0xe>
 8000912:	4638      	mov	r0, r7
 8000914:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000918:	89ab      	ldrh	r3, [r5, #12]
 800091a:	2b01      	cmp	r3, #1
 800091c:	d907      	bls.n	800092e <_fwalk_reent+0x3a>
 800091e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000922:	3301      	adds	r3, #1
 8000924:	d003      	beq.n	800092e <_fwalk_reent+0x3a>
 8000926:	4629      	mov	r1, r5
 8000928:	4630      	mov	r0, r6
 800092a:	47c0      	blx	r8
 800092c:	4307      	orrs	r7, r0
 800092e:	3568      	adds	r5, #104	; 0x68
 8000930:	e7e9      	b.n	8000906 <_fwalk_reent+0x12>

08000932 <__retarget_lock_init_recursive>:
 8000932:	4770      	bx	lr

08000934 <__retarget_lock_acquire_recursive>:
 8000934:	4770      	bx	lr

08000936 <__retarget_lock_release_recursive>:
 8000936:	4770      	bx	lr

08000938 <_malloc_r>:
 8000938:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800093a:	1ccd      	adds	r5, r1, #3
 800093c:	f025 0503 	bic.w	r5, r5, #3
 8000940:	3508      	adds	r5, #8
 8000942:	2d0c      	cmp	r5, #12
 8000944:	bf38      	it	cc
 8000946:	250c      	movcc	r5, #12
 8000948:	2d00      	cmp	r5, #0
 800094a:	4606      	mov	r6, r0
 800094c:	db01      	blt.n	8000952 <_malloc_r+0x1a>
 800094e:	42a9      	cmp	r1, r5
 8000950:	d903      	bls.n	800095a <_malloc_r+0x22>
 8000952:	230c      	movs	r3, #12
 8000954:	6033      	str	r3, [r6, #0]
 8000956:	2000      	movs	r0, #0
 8000958:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800095a:	f000 fda3 	bl	80014a4 <__malloc_lock>
 800095e:	4921      	ldr	r1, [pc, #132]	; (80009e4 <_malloc_r+0xac>)
 8000960:	680a      	ldr	r2, [r1, #0]
 8000962:	4614      	mov	r4, r2
 8000964:	b99c      	cbnz	r4, 800098e <_malloc_r+0x56>
 8000966:	4f20      	ldr	r7, [pc, #128]	; (80009e8 <_malloc_r+0xb0>)
 8000968:	683b      	ldr	r3, [r7, #0]
 800096a:	b923      	cbnz	r3, 8000976 <_malloc_r+0x3e>
 800096c:	4621      	mov	r1, r4
 800096e:	4630      	mov	r0, r6
 8000970:	f000 fb2a 	bl	8000fc8 <_sbrk_r>
 8000974:	6038      	str	r0, [r7, #0]
 8000976:	4629      	mov	r1, r5
 8000978:	4630      	mov	r0, r6
 800097a:	f000 fb25 	bl	8000fc8 <_sbrk_r>
 800097e:	1c43      	adds	r3, r0, #1
 8000980:	d123      	bne.n	80009ca <_malloc_r+0x92>
 8000982:	230c      	movs	r3, #12
 8000984:	6033      	str	r3, [r6, #0]
 8000986:	4630      	mov	r0, r6
 8000988:	f000 fd92 	bl	80014b0 <__malloc_unlock>
 800098c:	e7e3      	b.n	8000956 <_malloc_r+0x1e>
 800098e:	6823      	ldr	r3, [r4, #0]
 8000990:	1b5b      	subs	r3, r3, r5
 8000992:	d417      	bmi.n	80009c4 <_malloc_r+0x8c>
 8000994:	2b0b      	cmp	r3, #11
 8000996:	d903      	bls.n	80009a0 <_malloc_r+0x68>
 8000998:	6023      	str	r3, [r4, #0]
 800099a:	441c      	add	r4, r3
 800099c:	6025      	str	r5, [r4, #0]
 800099e:	e004      	b.n	80009aa <_malloc_r+0x72>
 80009a0:	6863      	ldr	r3, [r4, #4]
 80009a2:	42a2      	cmp	r2, r4
 80009a4:	bf0c      	ite	eq
 80009a6:	600b      	streq	r3, [r1, #0]
 80009a8:	6053      	strne	r3, [r2, #4]
 80009aa:	4630      	mov	r0, r6
 80009ac:	f000 fd80 	bl	80014b0 <__malloc_unlock>
 80009b0:	f104 000b 	add.w	r0, r4, #11
 80009b4:	1d23      	adds	r3, r4, #4
 80009b6:	f020 0007 	bic.w	r0, r0, #7
 80009ba:	1ac2      	subs	r2, r0, r3
 80009bc:	d0cc      	beq.n	8000958 <_malloc_r+0x20>
 80009be:	1a1b      	subs	r3, r3, r0
 80009c0:	50a3      	str	r3, [r4, r2]
 80009c2:	e7c9      	b.n	8000958 <_malloc_r+0x20>
 80009c4:	4622      	mov	r2, r4
 80009c6:	6864      	ldr	r4, [r4, #4]
 80009c8:	e7cc      	b.n	8000964 <_malloc_r+0x2c>
 80009ca:	1cc4      	adds	r4, r0, #3
 80009cc:	f024 0403 	bic.w	r4, r4, #3
 80009d0:	42a0      	cmp	r0, r4
 80009d2:	d0e3      	beq.n	800099c <_malloc_r+0x64>
 80009d4:	1a21      	subs	r1, r4, r0
 80009d6:	4630      	mov	r0, r6
 80009d8:	f000 faf6 	bl	8000fc8 <_sbrk_r>
 80009dc:	3001      	adds	r0, #1
 80009de:	d1dd      	bne.n	800099c <_malloc_r+0x64>
 80009e0:	e7cf      	b.n	8000982 <_malloc_r+0x4a>
 80009e2:	bf00      	nop
 80009e4:	20000088 	.word	0x20000088
 80009e8:	2000008c 	.word	0x2000008c

080009ec <__sfputc_r>:
 80009ec:	6893      	ldr	r3, [r2, #8]
 80009ee:	3b01      	subs	r3, #1
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	b410      	push	{r4}
 80009f4:	6093      	str	r3, [r2, #8]
 80009f6:	da08      	bge.n	8000a0a <__sfputc_r+0x1e>
 80009f8:	6994      	ldr	r4, [r2, #24]
 80009fa:	42a3      	cmp	r3, r4
 80009fc:	db01      	blt.n	8000a02 <__sfputc_r+0x16>
 80009fe:	290a      	cmp	r1, #10
 8000a00:	d103      	bne.n	8000a0a <__sfputc_r+0x1e>
 8000a02:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000a06:	f000 bb33 	b.w	8001070 <__swbuf_r>
 8000a0a:	6813      	ldr	r3, [r2, #0]
 8000a0c:	1c58      	adds	r0, r3, #1
 8000a0e:	6010      	str	r0, [r2, #0]
 8000a10:	7019      	strb	r1, [r3, #0]
 8000a12:	4608      	mov	r0, r1
 8000a14:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000a18:	4770      	bx	lr

08000a1a <__sfputs_r>:
 8000a1a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a1c:	4606      	mov	r6, r0
 8000a1e:	460f      	mov	r7, r1
 8000a20:	4614      	mov	r4, r2
 8000a22:	18d5      	adds	r5, r2, r3
 8000a24:	42ac      	cmp	r4, r5
 8000a26:	d101      	bne.n	8000a2c <__sfputs_r+0x12>
 8000a28:	2000      	movs	r0, #0
 8000a2a:	e007      	b.n	8000a3c <__sfputs_r+0x22>
 8000a2c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000a30:	463a      	mov	r2, r7
 8000a32:	4630      	mov	r0, r6
 8000a34:	f7ff ffda 	bl	80009ec <__sfputc_r>
 8000a38:	1c43      	adds	r3, r0, #1
 8000a3a:	d1f3      	bne.n	8000a24 <__sfputs_r+0xa>
 8000a3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08000a40 <_vfiprintf_r>:
 8000a40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000a44:	460d      	mov	r5, r1
 8000a46:	b09d      	sub	sp, #116	; 0x74
 8000a48:	4614      	mov	r4, r2
 8000a4a:	4698      	mov	r8, r3
 8000a4c:	4606      	mov	r6, r0
 8000a4e:	b118      	cbz	r0, 8000a58 <_vfiprintf_r+0x18>
 8000a50:	6983      	ldr	r3, [r0, #24]
 8000a52:	b90b      	cbnz	r3, 8000a58 <_vfiprintf_r+0x18>
 8000a54:	f7ff fed0 	bl	80007f8 <__sinit>
 8000a58:	4b89      	ldr	r3, [pc, #548]	; (8000c80 <_vfiprintf_r+0x240>)
 8000a5a:	429d      	cmp	r5, r3
 8000a5c:	d11b      	bne.n	8000a96 <_vfiprintf_r+0x56>
 8000a5e:	6875      	ldr	r5, [r6, #4]
 8000a60:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000a62:	07d9      	lsls	r1, r3, #31
 8000a64:	d405      	bmi.n	8000a72 <_vfiprintf_r+0x32>
 8000a66:	89ab      	ldrh	r3, [r5, #12]
 8000a68:	059a      	lsls	r2, r3, #22
 8000a6a:	d402      	bmi.n	8000a72 <_vfiprintf_r+0x32>
 8000a6c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000a6e:	f7ff ff61 	bl	8000934 <__retarget_lock_acquire_recursive>
 8000a72:	89ab      	ldrh	r3, [r5, #12]
 8000a74:	071b      	lsls	r3, r3, #28
 8000a76:	d501      	bpl.n	8000a7c <_vfiprintf_r+0x3c>
 8000a78:	692b      	ldr	r3, [r5, #16]
 8000a7a:	b9eb      	cbnz	r3, 8000ab8 <_vfiprintf_r+0x78>
 8000a7c:	4629      	mov	r1, r5
 8000a7e:	4630      	mov	r0, r6
 8000a80:	f000 fb5a 	bl	8001138 <__swsetup_r>
 8000a84:	b1c0      	cbz	r0, 8000ab8 <_vfiprintf_r+0x78>
 8000a86:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000a88:	07dc      	lsls	r4, r3, #31
 8000a8a:	d50e      	bpl.n	8000aaa <_vfiprintf_r+0x6a>
 8000a8c:	f04f 30ff 	mov.w	r0, #4294967295
 8000a90:	b01d      	add	sp, #116	; 0x74
 8000a92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000a96:	4b7b      	ldr	r3, [pc, #492]	; (8000c84 <_vfiprintf_r+0x244>)
 8000a98:	429d      	cmp	r5, r3
 8000a9a:	d101      	bne.n	8000aa0 <_vfiprintf_r+0x60>
 8000a9c:	68b5      	ldr	r5, [r6, #8]
 8000a9e:	e7df      	b.n	8000a60 <_vfiprintf_r+0x20>
 8000aa0:	4b79      	ldr	r3, [pc, #484]	; (8000c88 <_vfiprintf_r+0x248>)
 8000aa2:	429d      	cmp	r5, r3
 8000aa4:	bf08      	it	eq
 8000aa6:	68f5      	ldreq	r5, [r6, #12]
 8000aa8:	e7da      	b.n	8000a60 <_vfiprintf_r+0x20>
 8000aaa:	89ab      	ldrh	r3, [r5, #12]
 8000aac:	0598      	lsls	r0, r3, #22
 8000aae:	d4ed      	bmi.n	8000a8c <_vfiprintf_r+0x4c>
 8000ab0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000ab2:	f7ff ff40 	bl	8000936 <__retarget_lock_release_recursive>
 8000ab6:	e7e9      	b.n	8000a8c <_vfiprintf_r+0x4c>
 8000ab8:	2300      	movs	r3, #0
 8000aba:	9309      	str	r3, [sp, #36]	; 0x24
 8000abc:	2320      	movs	r3, #32
 8000abe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8000ac2:	f8cd 800c 	str.w	r8, [sp, #12]
 8000ac6:	2330      	movs	r3, #48	; 0x30
 8000ac8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8000c8c <_vfiprintf_r+0x24c>
 8000acc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8000ad0:	f04f 0901 	mov.w	r9, #1
 8000ad4:	4623      	mov	r3, r4
 8000ad6:	469a      	mov	sl, r3
 8000ad8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000adc:	b10a      	cbz	r2, 8000ae2 <_vfiprintf_r+0xa2>
 8000ade:	2a25      	cmp	r2, #37	; 0x25
 8000ae0:	d1f9      	bne.n	8000ad6 <_vfiprintf_r+0x96>
 8000ae2:	ebba 0b04 	subs.w	fp, sl, r4
 8000ae6:	d00b      	beq.n	8000b00 <_vfiprintf_r+0xc0>
 8000ae8:	465b      	mov	r3, fp
 8000aea:	4622      	mov	r2, r4
 8000aec:	4629      	mov	r1, r5
 8000aee:	4630      	mov	r0, r6
 8000af0:	f7ff ff93 	bl	8000a1a <__sfputs_r>
 8000af4:	3001      	adds	r0, #1
 8000af6:	f000 80aa 	beq.w	8000c4e <_vfiprintf_r+0x20e>
 8000afa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8000afc:	445a      	add	r2, fp
 8000afe:	9209      	str	r2, [sp, #36]	; 0x24
 8000b00:	f89a 3000 	ldrb.w	r3, [sl]
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	f000 80a2 	beq.w	8000c4e <_vfiprintf_r+0x20e>
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	f04f 32ff 	mov.w	r2, #4294967295
 8000b10:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000b14:	f10a 0a01 	add.w	sl, sl, #1
 8000b18:	9304      	str	r3, [sp, #16]
 8000b1a:	9307      	str	r3, [sp, #28]
 8000b1c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8000b20:	931a      	str	r3, [sp, #104]	; 0x68
 8000b22:	4654      	mov	r4, sl
 8000b24:	2205      	movs	r2, #5
 8000b26:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000b2a:	4858      	ldr	r0, [pc, #352]	; (8000c8c <_vfiprintf_r+0x24c>)
 8000b2c:	f7ff fb60 	bl	80001f0 <memchr>
 8000b30:	9a04      	ldr	r2, [sp, #16]
 8000b32:	b9d8      	cbnz	r0, 8000b6c <_vfiprintf_r+0x12c>
 8000b34:	06d1      	lsls	r1, r2, #27
 8000b36:	bf44      	itt	mi
 8000b38:	2320      	movmi	r3, #32
 8000b3a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000b3e:	0713      	lsls	r3, r2, #28
 8000b40:	bf44      	itt	mi
 8000b42:	232b      	movmi	r3, #43	; 0x2b
 8000b44:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000b48:	f89a 3000 	ldrb.w	r3, [sl]
 8000b4c:	2b2a      	cmp	r3, #42	; 0x2a
 8000b4e:	d015      	beq.n	8000b7c <_vfiprintf_r+0x13c>
 8000b50:	9a07      	ldr	r2, [sp, #28]
 8000b52:	4654      	mov	r4, sl
 8000b54:	2000      	movs	r0, #0
 8000b56:	f04f 0c0a 	mov.w	ip, #10
 8000b5a:	4621      	mov	r1, r4
 8000b5c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000b60:	3b30      	subs	r3, #48	; 0x30
 8000b62:	2b09      	cmp	r3, #9
 8000b64:	d94e      	bls.n	8000c04 <_vfiprintf_r+0x1c4>
 8000b66:	b1b0      	cbz	r0, 8000b96 <_vfiprintf_r+0x156>
 8000b68:	9207      	str	r2, [sp, #28]
 8000b6a:	e014      	b.n	8000b96 <_vfiprintf_r+0x156>
 8000b6c:	eba0 0308 	sub.w	r3, r0, r8
 8000b70:	fa09 f303 	lsl.w	r3, r9, r3
 8000b74:	4313      	orrs	r3, r2
 8000b76:	9304      	str	r3, [sp, #16]
 8000b78:	46a2      	mov	sl, r4
 8000b7a:	e7d2      	b.n	8000b22 <_vfiprintf_r+0xe2>
 8000b7c:	9b03      	ldr	r3, [sp, #12]
 8000b7e:	1d19      	adds	r1, r3, #4
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	9103      	str	r1, [sp, #12]
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	bfbb      	ittet	lt
 8000b88:	425b      	neglt	r3, r3
 8000b8a:	f042 0202 	orrlt.w	r2, r2, #2
 8000b8e:	9307      	strge	r3, [sp, #28]
 8000b90:	9307      	strlt	r3, [sp, #28]
 8000b92:	bfb8      	it	lt
 8000b94:	9204      	strlt	r2, [sp, #16]
 8000b96:	7823      	ldrb	r3, [r4, #0]
 8000b98:	2b2e      	cmp	r3, #46	; 0x2e
 8000b9a:	d10c      	bne.n	8000bb6 <_vfiprintf_r+0x176>
 8000b9c:	7863      	ldrb	r3, [r4, #1]
 8000b9e:	2b2a      	cmp	r3, #42	; 0x2a
 8000ba0:	d135      	bne.n	8000c0e <_vfiprintf_r+0x1ce>
 8000ba2:	9b03      	ldr	r3, [sp, #12]
 8000ba4:	1d1a      	adds	r2, r3, #4
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	9203      	str	r2, [sp, #12]
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	bfb8      	it	lt
 8000bae:	f04f 33ff 	movlt.w	r3, #4294967295
 8000bb2:	3402      	adds	r4, #2
 8000bb4:	9305      	str	r3, [sp, #20]
 8000bb6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8000c9c <_vfiprintf_r+0x25c>
 8000bba:	7821      	ldrb	r1, [r4, #0]
 8000bbc:	2203      	movs	r2, #3
 8000bbe:	4650      	mov	r0, sl
 8000bc0:	f7ff fb16 	bl	80001f0 <memchr>
 8000bc4:	b140      	cbz	r0, 8000bd8 <_vfiprintf_r+0x198>
 8000bc6:	2340      	movs	r3, #64	; 0x40
 8000bc8:	eba0 000a 	sub.w	r0, r0, sl
 8000bcc:	fa03 f000 	lsl.w	r0, r3, r0
 8000bd0:	9b04      	ldr	r3, [sp, #16]
 8000bd2:	4303      	orrs	r3, r0
 8000bd4:	3401      	adds	r4, #1
 8000bd6:	9304      	str	r3, [sp, #16]
 8000bd8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000bdc:	482c      	ldr	r0, [pc, #176]	; (8000c90 <_vfiprintf_r+0x250>)
 8000bde:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8000be2:	2206      	movs	r2, #6
 8000be4:	f7ff fb04 	bl	80001f0 <memchr>
 8000be8:	2800      	cmp	r0, #0
 8000bea:	d03f      	beq.n	8000c6c <_vfiprintf_r+0x22c>
 8000bec:	4b29      	ldr	r3, [pc, #164]	; (8000c94 <_vfiprintf_r+0x254>)
 8000bee:	bb1b      	cbnz	r3, 8000c38 <_vfiprintf_r+0x1f8>
 8000bf0:	9b03      	ldr	r3, [sp, #12]
 8000bf2:	3307      	adds	r3, #7
 8000bf4:	f023 0307 	bic.w	r3, r3, #7
 8000bf8:	3308      	adds	r3, #8
 8000bfa:	9303      	str	r3, [sp, #12]
 8000bfc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000bfe:	443b      	add	r3, r7
 8000c00:	9309      	str	r3, [sp, #36]	; 0x24
 8000c02:	e767      	b.n	8000ad4 <_vfiprintf_r+0x94>
 8000c04:	fb0c 3202 	mla	r2, ip, r2, r3
 8000c08:	460c      	mov	r4, r1
 8000c0a:	2001      	movs	r0, #1
 8000c0c:	e7a5      	b.n	8000b5a <_vfiprintf_r+0x11a>
 8000c0e:	2300      	movs	r3, #0
 8000c10:	3401      	adds	r4, #1
 8000c12:	9305      	str	r3, [sp, #20]
 8000c14:	4619      	mov	r1, r3
 8000c16:	f04f 0c0a 	mov.w	ip, #10
 8000c1a:	4620      	mov	r0, r4
 8000c1c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000c20:	3a30      	subs	r2, #48	; 0x30
 8000c22:	2a09      	cmp	r2, #9
 8000c24:	d903      	bls.n	8000c2e <_vfiprintf_r+0x1ee>
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d0c5      	beq.n	8000bb6 <_vfiprintf_r+0x176>
 8000c2a:	9105      	str	r1, [sp, #20]
 8000c2c:	e7c3      	b.n	8000bb6 <_vfiprintf_r+0x176>
 8000c2e:	fb0c 2101 	mla	r1, ip, r1, r2
 8000c32:	4604      	mov	r4, r0
 8000c34:	2301      	movs	r3, #1
 8000c36:	e7f0      	b.n	8000c1a <_vfiprintf_r+0x1da>
 8000c38:	ab03      	add	r3, sp, #12
 8000c3a:	9300      	str	r3, [sp, #0]
 8000c3c:	462a      	mov	r2, r5
 8000c3e:	4b16      	ldr	r3, [pc, #88]	; (8000c98 <_vfiprintf_r+0x258>)
 8000c40:	a904      	add	r1, sp, #16
 8000c42:	4630      	mov	r0, r6
 8000c44:	f3af 8000 	nop.w
 8000c48:	4607      	mov	r7, r0
 8000c4a:	1c78      	adds	r0, r7, #1
 8000c4c:	d1d6      	bne.n	8000bfc <_vfiprintf_r+0x1bc>
 8000c4e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000c50:	07d9      	lsls	r1, r3, #31
 8000c52:	d405      	bmi.n	8000c60 <_vfiprintf_r+0x220>
 8000c54:	89ab      	ldrh	r3, [r5, #12]
 8000c56:	059a      	lsls	r2, r3, #22
 8000c58:	d402      	bmi.n	8000c60 <_vfiprintf_r+0x220>
 8000c5a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000c5c:	f7ff fe6b 	bl	8000936 <__retarget_lock_release_recursive>
 8000c60:	89ab      	ldrh	r3, [r5, #12]
 8000c62:	065b      	lsls	r3, r3, #25
 8000c64:	f53f af12 	bmi.w	8000a8c <_vfiprintf_r+0x4c>
 8000c68:	9809      	ldr	r0, [sp, #36]	; 0x24
 8000c6a:	e711      	b.n	8000a90 <_vfiprintf_r+0x50>
 8000c6c:	ab03      	add	r3, sp, #12
 8000c6e:	9300      	str	r3, [sp, #0]
 8000c70:	462a      	mov	r2, r5
 8000c72:	4b09      	ldr	r3, [pc, #36]	; (8000c98 <_vfiprintf_r+0x258>)
 8000c74:	a904      	add	r1, sp, #16
 8000c76:	4630      	mov	r0, r6
 8000c78:	f000 f880 	bl	8000d7c <_printf_i>
 8000c7c:	e7e4      	b.n	8000c48 <_vfiprintf_r+0x208>
 8000c7e:	bf00      	nop
 8000c80:	08001618 	.word	0x08001618
 8000c84:	08001638 	.word	0x08001638
 8000c88:	080015f8 	.word	0x080015f8
 8000c8c:	08001658 	.word	0x08001658
 8000c90:	08001662 	.word	0x08001662
 8000c94:	00000000 	.word	0x00000000
 8000c98:	08000a1b 	.word	0x08000a1b
 8000c9c:	0800165e 	.word	0x0800165e

08000ca0 <_printf_common>:
 8000ca0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ca4:	4616      	mov	r6, r2
 8000ca6:	4699      	mov	r9, r3
 8000ca8:	688a      	ldr	r2, [r1, #8]
 8000caa:	690b      	ldr	r3, [r1, #16]
 8000cac:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8000cb0:	4293      	cmp	r3, r2
 8000cb2:	bfb8      	it	lt
 8000cb4:	4613      	movlt	r3, r2
 8000cb6:	6033      	str	r3, [r6, #0]
 8000cb8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8000cbc:	4607      	mov	r7, r0
 8000cbe:	460c      	mov	r4, r1
 8000cc0:	b10a      	cbz	r2, 8000cc6 <_printf_common+0x26>
 8000cc2:	3301      	adds	r3, #1
 8000cc4:	6033      	str	r3, [r6, #0]
 8000cc6:	6823      	ldr	r3, [r4, #0]
 8000cc8:	0699      	lsls	r1, r3, #26
 8000cca:	bf42      	ittt	mi
 8000ccc:	6833      	ldrmi	r3, [r6, #0]
 8000cce:	3302      	addmi	r3, #2
 8000cd0:	6033      	strmi	r3, [r6, #0]
 8000cd2:	6825      	ldr	r5, [r4, #0]
 8000cd4:	f015 0506 	ands.w	r5, r5, #6
 8000cd8:	d106      	bne.n	8000ce8 <_printf_common+0x48>
 8000cda:	f104 0a19 	add.w	sl, r4, #25
 8000cde:	68e3      	ldr	r3, [r4, #12]
 8000ce0:	6832      	ldr	r2, [r6, #0]
 8000ce2:	1a9b      	subs	r3, r3, r2
 8000ce4:	42ab      	cmp	r3, r5
 8000ce6:	dc26      	bgt.n	8000d36 <_printf_common+0x96>
 8000ce8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8000cec:	1e13      	subs	r3, r2, #0
 8000cee:	6822      	ldr	r2, [r4, #0]
 8000cf0:	bf18      	it	ne
 8000cf2:	2301      	movne	r3, #1
 8000cf4:	0692      	lsls	r2, r2, #26
 8000cf6:	d42b      	bmi.n	8000d50 <_printf_common+0xb0>
 8000cf8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8000cfc:	4649      	mov	r1, r9
 8000cfe:	4638      	mov	r0, r7
 8000d00:	47c0      	blx	r8
 8000d02:	3001      	adds	r0, #1
 8000d04:	d01e      	beq.n	8000d44 <_printf_common+0xa4>
 8000d06:	6823      	ldr	r3, [r4, #0]
 8000d08:	68e5      	ldr	r5, [r4, #12]
 8000d0a:	6832      	ldr	r2, [r6, #0]
 8000d0c:	f003 0306 	and.w	r3, r3, #6
 8000d10:	2b04      	cmp	r3, #4
 8000d12:	bf08      	it	eq
 8000d14:	1aad      	subeq	r5, r5, r2
 8000d16:	68a3      	ldr	r3, [r4, #8]
 8000d18:	6922      	ldr	r2, [r4, #16]
 8000d1a:	bf0c      	ite	eq
 8000d1c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8000d20:	2500      	movne	r5, #0
 8000d22:	4293      	cmp	r3, r2
 8000d24:	bfc4      	itt	gt
 8000d26:	1a9b      	subgt	r3, r3, r2
 8000d28:	18ed      	addgt	r5, r5, r3
 8000d2a:	2600      	movs	r6, #0
 8000d2c:	341a      	adds	r4, #26
 8000d2e:	42b5      	cmp	r5, r6
 8000d30:	d11a      	bne.n	8000d68 <_printf_common+0xc8>
 8000d32:	2000      	movs	r0, #0
 8000d34:	e008      	b.n	8000d48 <_printf_common+0xa8>
 8000d36:	2301      	movs	r3, #1
 8000d38:	4652      	mov	r2, sl
 8000d3a:	4649      	mov	r1, r9
 8000d3c:	4638      	mov	r0, r7
 8000d3e:	47c0      	blx	r8
 8000d40:	3001      	adds	r0, #1
 8000d42:	d103      	bne.n	8000d4c <_printf_common+0xac>
 8000d44:	f04f 30ff 	mov.w	r0, #4294967295
 8000d48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d4c:	3501      	adds	r5, #1
 8000d4e:	e7c6      	b.n	8000cde <_printf_common+0x3e>
 8000d50:	18e1      	adds	r1, r4, r3
 8000d52:	1c5a      	adds	r2, r3, #1
 8000d54:	2030      	movs	r0, #48	; 0x30
 8000d56:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8000d5a:	4422      	add	r2, r4
 8000d5c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8000d60:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8000d64:	3302      	adds	r3, #2
 8000d66:	e7c7      	b.n	8000cf8 <_printf_common+0x58>
 8000d68:	2301      	movs	r3, #1
 8000d6a:	4622      	mov	r2, r4
 8000d6c:	4649      	mov	r1, r9
 8000d6e:	4638      	mov	r0, r7
 8000d70:	47c0      	blx	r8
 8000d72:	3001      	adds	r0, #1
 8000d74:	d0e6      	beq.n	8000d44 <_printf_common+0xa4>
 8000d76:	3601      	adds	r6, #1
 8000d78:	e7d9      	b.n	8000d2e <_printf_common+0x8e>
	...

08000d7c <_printf_i>:
 8000d7c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8000d80:	460c      	mov	r4, r1
 8000d82:	4691      	mov	r9, r2
 8000d84:	7e27      	ldrb	r7, [r4, #24]
 8000d86:	990c      	ldr	r1, [sp, #48]	; 0x30
 8000d88:	2f78      	cmp	r7, #120	; 0x78
 8000d8a:	4680      	mov	r8, r0
 8000d8c:	469a      	mov	sl, r3
 8000d8e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8000d92:	d807      	bhi.n	8000da4 <_printf_i+0x28>
 8000d94:	2f62      	cmp	r7, #98	; 0x62
 8000d96:	d80a      	bhi.n	8000dae <_printf_i+0x32>
 8000d98:	2f00      	cmp	r7, #0
 8000d9a:	f000 80d8 	beq.w	8000f4e <_printf_i+0x1d2>
 8000d9e:	2f58      	cmp	r7, #88	; 0x58
 8000da0:	f000 80a3 	beq.w	8000eea <_printf_i+0x16e>
 8000da4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8000da8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8000dac:	e03a      	b.n	8000e24 <_printf_i+0xa8>
 8000dae:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8000db2:	2b15      	cmp	r3, #21
 8000db4:	d8f6      	bhi.n	8000da4 <_printf_i+0x28>
 8000db6:	a001      	add	r0, pc, #4	; (adr r0, 8000dbc <_printf_i+0x40>)
 8000db8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8000dbc:	08000e15 	.word	0x08000e15
 8000dc0:	08000e29 	.word	0x08000e29
 8000dc4:	08000da5 	.word	0x08000da5
 8000dc8:	08000da5 	.word	0x08000da5
 8000dcc:	08000da5 	.word	0x08000da5
 8000dd0:	08000da5 	.word	0x08000da5
 8000dd4:	08000e29 	.word	0x08000e29
 8000dd8:	08000da5 	.word	0x08000da5
 8000ddc:	08000da5 	.word	0x08000da5
 8000de0:	08000da5 	.word	0x08000da5
 8000de4:	08000da5 	.word	0x08000da5
 8000de8:	08000f35 	.word	0x08000f35
 8000dec:	08000e59 	.word	0x08000e59
 8000df0:	08000f17 	.word	0x08000f17
 8000df4:	08000da5 	.word	0x08000da5
 8000df8:	08000da5 	.word	0x08000da5
 8000dfc:	08000f57 	.word	0x08000f57
 8000e00:	08000da5 	.word	0x08000da5
 8000e04:	08000e59 	.word	0x08000e59
 8000e08:	08000da5 	.word	0x08000da5
 8000e0c:	08000da5 	.word	0x08000da5
 8000e10:	08000f1f 	.word	0x08000f1f
 8000e14:	680b      	ldr	r3, [r1, #0]
 8000e16:	1d1a      	adds	r2, r3, #4
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	600a      	str	r2, [r1, #0]
 8000e1c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8000e20:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8000e24:	2301      	movs	r3, #1
 8000e26:	e0a3      	b.n	8000f70 <_printf_i+0x1f4>
 8000e28:	6825      	ldr	r5, [r4, #0]
 8000e2a:	6808      	ldr	r0, [r1, #0]
 8000e2c:	062e      	lsls	r6, r5, #24
 8000e2e:	f100 0304 	add.w	r3, r0, #4
 8000e32:	d50a      	bpl.n	8000e4a <_printf_i+0xce>
 8000e34:	6805      	ldr	r5, [r0, #0]
 8000e36:	600b      	str	r3, [r1, #0]
 8000e38:	2d00      	cmp	r5, #0
 8000e3a:	da03      	bge.n	8000e44 <_printf_i+0xc8>
 8000e3c:	232d      	movs	r3, #45	; 0x2d
 8000e3e:	426d      	negs	r5, r5
 8000e40:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8000e44:	485e      	ldr	r0, [pc, #376]	; (8000fc0 <_printf_i+0x244>)
 8000e46:	230a      	movs	r3, #10
 8000e48:	e019      	b.n	8000e7e <_printf_i+0x102>
 8000e4a:	f015 0f40 	tst.w	r5, #64	; 0x40
 8000e4e:	6805      	ldr	r5, [r0, #0]
 8000e50:	600b      	str	r3, [r1, #0]
 8000e52:	bf18      	it	ne
 8000e54:	b22d      	sxthne	r5, r5
 8000e56:	e7ef      	b.n	8000e38 <_printf_i+0xbc>
 8000e58:	680b      	ldr	r3, [r1, #0]
 8000e5a:	6825      	ldr	r5, [r4, #0]
 8000e5c:	1d18      	adds	r0, r3, #4
 8000e5e:	6008      	str	r0, [r1, #0]
 8000e60:	0628      	lsls	r0, r5, #24
 8000e62:	d501      	bpl.n	8000e68 <_printf_i+0xec>
 8000e64:	681d      	ldr	r5, [r3, #0]
 8000e66:	e002      	b.n	8000e6e <_printf_i+0xf2>
 8000e68:	0669      	lsls	r1, r5, #25
 8000e6a:	d5fb      	bpl.n	8000e64 <_printf_i+0xe8>
 8000e6c:	881d      	ldrh	r5, [r3, #0]
 8000e6e:	4854      	ldr	r0, [pc, #336]	; (8000fc0 <_printf_i+0x244>)
 8000e70:	2f6f      	cmp	r7, #111	; 0x6f
 8000e72:	bf0c      	ite	eq
 8000e74:	2308      	moveq	r3, #8
 8000e76:	230a      	movne	r3, #10
 8000e78:	2100      	movs	r1, #0
 8000e7a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8000e7e:	6866      	ldr	r6, [r4, #4]
 8000e80:	60a6      	str	r6, [r4, #8]
 8000e82:	2e00      	cmp	r6, #0
 8000e84:	bfa2      	ittt	ge
 8000e86:	6821      	ldrge	r1, [r4, #0]
 8000e88:	f021 0104 	bicge.w	r1, r1, #4
 8000e8c:	6021      	strge	r1, [r4, #0]
 8000e8e:	b90d      	cbnz	r5, 8000e94 <_printf_i+0x118>
 8000e90:	2e00      	cmp	r6, #0
 8000e92:	d04d      	beq.n	8000f30 <_printf_i+0x1b4>
 8000e94:	4616      	mov	r6, r2
 8000e96:	fbb5 f1f3 	udiv	r1, r5, r3
 8000e9a:	fb03 5711 	mls	r7, r3, r1, r5
 8000e9e:	5dc7      	ldrb	r7, [r0, r7]
 8000ea0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8000ea4:	462f      	mov	r7, r5
 8000ea6:	42bb      	cmp	r3, r7
 8000ea8:	460d      	mov	r5, r1
 8000eaa:	d9f4      	bls.n	8000e96 <_printf_i+0x11a>
 8000eac:	2b08      	cmp	r3, #8
 8000eae:	d10b      	bne.n	8000ec8 <_printf_i+0x14c>
 8000eb0:	6823      	ldr	r3, [r4, #0]
 8000eb2:	07df      	lsls	r7, r3, #31
 8000eb4:	d508      	bpl.n	8000ec8 <_printf_i+0x14c>
 8000eb6:	6923      	ldr	r3, [r4, #16]
 8000eb8:	6861      	ldr	r1, [r4, #4]
 8000eba:	4299      	cmp	r1, r3
 8000ebc:	bfde      	ittt	le
 8000ebe:	2330      	movle	r3, #48	; 0x30
 8000ec0:	f806 3c01 	strble.w	r3, [r6, #-1]
 8000ec4:	f106 36ff 	addle.w	r6, r6, #4294967295
 8000ec8:	1b92      	subs	r2, r2, r6
 8000eca:	6122      	str	r2, [r4, #16]
 8000ecc:	f8cd a000 	str.w	sl, [sp]
 8000ed0:	464b      	mov	r3, r9
 8000ed2:	aa03      	add	r2, sp, #12
 8000ed4:	4621      	mov	r1, r4
 8000ed6:	4640      	mov	r0, r8
 8000ed8:	f7ff fee2 	bl	8000ca0 <_printf_common>
 8000edc:	3001      	adds	r0, #1
 8000ede:	d14c      	bne.n	8000f7a <_printf_i+0x1fe>
 8000ee0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ee4:	b004      	add	sp, #16
 8000ee6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eea:	4835      	ldr	r0, [pc, #212]	; (8000fc0 <_printf_i+0x244>)
 8000eec:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8000ef0:	6823      	ldr	r3, [r4, #0]
 8000ef2:	680e      	ldr	r6, [r1, #0]
 8000ef4:	061f      	lsls	r7, r3, #24
 8000ef6:	f856 5b04 	ldr.w	r5, [r6], #4
 8000efa:	600e      	str	r6, [r1, #0]
 8000efc:	d514      	bpl.n	8000f28 <_printf_i+0x1ac>
 8000efe:	07d9      	lsls	r1, r3, #31
 8000f00:	bf44      	itt	mi
 8000f02:	f043 0320 	orrmi.w	r3, r3, #32
 8000f06:	6023      	strmi	r3, [r4, #0]
 8000f08:	b91d      	cbnz	r5, 8000f12 <_printf_i+0x196>
 8000f0a:	6823      	ldr	r3, [r4, #0]
 8000f0c:	f023 0320 	bic.w	r3, r3, #32
 8000f10:	6023      	str	r3, [r4, #0]
 8000f12:	2310      	movs	r3, #16
 8000f14:	e7b0      	b.n	8000e78 <_printf_i+0xfc>
 8000f16:	6823      	ldr	r3, [r4, #0]
 8000f18:	f043 0320 	orr.w	r3, r3, #32
 8000f1c:	6023      	str	r3, [r4, #0]
 8000f1e:	2378      	movs	r3, #120	; 0x78
 8000f20:	4828      	ldr	r0, [pc, #160]	; (8000fc4 <_printf_i+0x248>)
 8000f22:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8000f26:	e7e3      	b.n	8000ef0 <_printf_i+0x174>
 8000f28:	065e      	lsls	r6, r3, #25
 8000f2a:	bf48      	it	mi
 8000f2c:	b2ad      	uxthmi	r5, r5
 8000f2e:	e7e6      	b.n	8000efe <_printf_i+0x182>
 8000f30:	4616      	mov	r6, r2
 8000f32:	e7bb      	b.n	8000eac <_printf_i+0x130>
 8000f34:	680b      	ldr	r3, [r1, #0]
 8000f36:	6826      	ldr	r6, [r4, #0]
 8000f38:	6960      	ldr	r0, [r4, #20]
 8000f3a:	1d1d      	adds	r5, r3, #4
 8000f3c:	600d      	str	r5, [r1, #0]
 8000f3e:	0635      	lsls	r5, r6, #24
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	d501      	bpl.n	8000f48 <_printf_i+0x1cc>
 8000f44:	6018      	str	r0, [r3, #0]
 8000f46:	e002      	b.n	8000f4e <_printf_i+0x1d2>
 8000f48:	0671      	lsls	r1, r6, #25
 8000f4a:	d5fb      	bpl.n	8000f44 <_printf_i+0x1c8>
 8000f4c:	8018      	strh	r0, [r3, #0]
 8000f4e:	2300      	movs	r3, #0
 8000f50:	6123      	str	r3, [r4, #16]
 8000f52:	4616      	mov	r6, r2
 8000f54:	e7ba      	b.n	8000ecc <_printf_i+0x150>
 8000f56:	680b      	ldr	r3, [r1, #0]
 8000f58:	1d1a      	adds	r2, r3, #4
 8000f5a:	600a      	str	r2, [r1, #0]
 8000f5c:	681e      	ldr	r6, [r3, #0]
 8000f5e:	6862      	ldr	r2, [r4, #4]
 8000f60:	2100      	movs	r1, #0
 8000f62:	4630      	mov	r0, r6
 8000f64:	f7ff f944 	bl	80001f0 <memchr>
 8000f68:	b108      	cbz	r0, 8000f6e <_printf_i+0x1f2>
 8000f6a:	1b80      	subs	r0, r0, r6
 8000f6c:	6060      	str	r0, [r4, #4]
 8000f6e:	6863      	ldr	r3, [r4, #4]
 8000f70:	6123      	str	r3, [r4, #16]
 8000f72:	2300      	movs	r3, #0
 8000f74:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8000f78:	e7a8      	b.n	8000ecc <_printf_i+0x150>
 8000f7a:	6923      	ldr	r3, [r4, #16]
 8000f7c:	4632      	mov	r2, r6
 8000f7e:	4649      	mov	r1, r9
 8000f80:	4640      	mov	r0, r8
 8000f82:	47d0      	blx	sl
 8000f84:	3001      	adds	r0, #1
 8000f86:	d0ab      	beq.n	8000ee0 <_printf_i+0x164>
 8000f88:	6823      	ldr	r3, [r4, #0]
 8000f8a:	079b      	lsls	r3, r3, #30
 8000f8c:	d413      	bmi.n	8000fb6 <_printf_i+0x23a>
 8000f8e:	68e0      	ldr	r0, [r4, #12]
 8000f90:	9b03      	ldr	r3, [sp, #12]
 8000f92:	4298      	cmp	r0, r3
 8000f94:	bfb8      	it	lt
 8000f96:	4618      	movlt	r0, r3
 8000f98:	e7a4      	b.n	8000ee4 <_printf_i+0x168>
 8000f9a:	2301      	movs	r3, #1
 8000f9c:	4632      	mov	r2, r6
 8000f9e:	4649      	mov	r1, r9
 8000fa0:	4640      	mov	r0, r8
 8000fa2:	47d0      	blx	sl
 8000fa4:	3001      	adds	r0, #1
 8000fa6:	d09b      	beq.n	8000ee0 <_printf_i+0x164>
 8000fa8:	3501      	adds	r5, #1
 8000faa:	68e3      	ldr	r3, [r4, #12]
 8000fac:	9903      	ldr	r1, [sp, #12]
 8000fae:	1a5b      	subs	r3, r3, r1
 8000fb0:	42ab      	cmp	r3, r5
 8000fb2:	dcf2      	bgt.n	8000f9a <_printf_i+0x21e>
 8000fb4:	e7eb      	b.n	8000f8e <_printf_i+0x212>
 8000fb6:	2500      	movs	r5, #0
 8000fb8:	f104 0619 	add.w	r6, r4, #25
 8000fbc:	e7f5      	b.n	8000faa <_printf_i+0x22e>
 8000fbe:	bf00      	nop
 8000fc0:	08001669 	.word	0x08001669
 8000fc4:	0800167a 	.word	0x0800167a

08000fc8 <_sbrk_r>:
 8000fc8:	b538      	push	{r3, r4, r5, lr}
 8000fca:	4d06      	ldr	r5, [pc, #24]	; (8000fe4 <_sbrk_r+0x1c>)
 8000fcc:	2300      	movs	r3, #0
 8000fce:	4604      	mov	r4, r0
 8000fd0:	4608      	mov	r0, r1
 8000fd2:	602b      	str	r3, [r5, #0]
 8000fd4:	f7ff f9fe 	bl	80003d4 <_sbrk>
 8000fd8:	1c43      	adds	r3, r0, #1
 8000fda:	d102      	bne.n	8000fe2 <_sbrk_r+0x1a>
 8000fdc:	682b      	ldr	r3, [r5, #0]
 8000fde:	b103      	cbz	r3, 8000fe2 <_sbrk_r+0x1a>
 8000fe0:	6023      	str	r3, [r4, #0]
 8000fe2:	bd38      	pop	{r3, r4, r5, pc}
 8000fe4:	200000a4 	.word	0x200000a4

08000fe8 <__sread>:
 8000fe8:	b510      	push	{r4, lr}
 8000fea:	460c      	mov	r4, r1
 8000fec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000ff0:	f000 fab4 	bl	800155c <_read_r>
 8000ff4:	2800      	cmp	r0, #0
 8000ff6:	bfab      	itete	ge
 8000ff8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8000ffa:	89a3      	ldrhlt	r3, [r4, #12]
 8000ffc:	181b      	addge	r3, r3, r0
 8000ffe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8001002:	bfac      	ite	ge
 8001004:	6563      	strge	r3, [r4, #84]	; 0x54
 8001006:	81a3      	strhlt	r3, [r4, #12]
 8001008:	bd10      	pop	{r4, pc}

0800100a <__swrite>:
 800100a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800100e:	461f      	mov	r7, r3
 8001010:	898b      	ldrh	r3, [r1, #12]
 8001012:	05db      	lsls	r3, r3, #23
 8001014:	4605      	mov	r5, r0
 8001016:	460c      	mov	r4, r1
 8001018:	4616      	mov	r6, r2
 800101a:	d505      	bpl.n	8001028 <__swrite+0x1e>
 800101c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001020:	2302      	movs	r3, #2
 8001022:	2200      	movs	r2, #0
 8001024:	f000 f9c8 	bl	80013b8 <_lseek_r>
 8001028:	89a3      	ldrh	r3, [r4, #12]
 800102a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800102e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001032:	81a3      	strh	r3, [r4, #12]
 8001034:	4632      	mov	r2, r6
 8001036:	463b      	mov	r3, r7
 8001038:	4628      	mov	r0, r5
 800103a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800103e:	f000 b869 	b.w	8001114 <_write_r>

08001042 <__sseek>:
 8001042:	b510      	push	{r4, lr}
 8001044:	460c      	mov	r4, r1
 8001046:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800104a:	f000 f9b5 	bl	80013b8 <_lseek_r>
 800104e:	1c43      	adds	r3, r0, #1
 8001050:	89a3      	ldrh	r3, [r4, #12]
 8001052:	bf15      	itete	ne
 8001054:	6560      	strne	r0, [r4, #84]	; 0x54
 8001056:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800105a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800105e:	81a3      	strheq	r3, [r4, #12]
 8001060:	bf18      	it	ne
 8001062:	81a3      	strhne	r3, [r4, #12]
 8001064:	bd10      	pop	{r4, pc}

08001066 <__sclose>:
 8001066:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800106a:	f000 b8d3 	b.w	8001214 <_close_r>
	...

08001070 <__swbuf_r>:
 8001070:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001072:	460e      	mov	r6, r1
 8001074:	4614      	mov	r4, r2
 8001076:	4605      	mov	r5, r0
 8001078:	b118      	cbz	r0, 8001082 <__swbuf_r+0x12>
 800107a:	6983      	ldr	r3, [r0, #24]
 800107c:	b90b      	cbnz	r3, 8001082 <__swbuf_r+0x12>
 800107e:	f7ff fbbb 	bl	80007f8 <__sinit>
 8001082:	4b21      	ldr	r3, [pc, #132]	; (8001108 <__swbuf_r+0x98>)
 8001084:	429c      	cmp	r4, r3
 8001086:	d12b      	bne.n	80010e0 <__swbuf_r+0x70>
 8001088:	686c      	ldr	r4, [r5, #4]
 800108a:	69a3      	ldr	r3, [r4, #24]
 800108c:	60a3      	str	r3, [r4, #8]
 800108e:	89a3      	ldrh	r3, [r4, #12]
 8001090:	071a      	lsls	r2, r3, #28
 8001092:	d52f      	bpl.n	80010f4 <__swbuf_r+0x84>
 8001094:	6923      	ldr	r3, [r4, #16]
 8001096:	b36b      	cbz	r3, 80010f4 <__swbuf_r+0x84>
 8001098:	6923      	ldr	r3, [r4, #16]
 800109a:	6820      	ldr	r0, [r4, #0]
 800109c:	1ac0      	subs	r0, r0, r3
 800109e:	6963      	ldr	r3, [r4, #20]
 80010a0:	b2f6      	uxtb	r6, r6
 80010a2:	4283      	cmp	r3, r0
 80010a4:	4637      	mov	r7, r6
 80010a6:	dc04      	bgt.n	80010b2 <__swbuf_r+0x42>
 80010a8:	4621      	mov	r1, r4
 80010aa:	4628      	mov	r0, r5
 80010ac:	f000 f948 	bl	8001340 <_fflush_r>
 80010b0:	bb30      	cbnz	r0, 8001100 <__swbuf_r+0x90>
 80010b2:	68a3      	ldr	r3, [r4, #8]
 80010b4:	3b01      	subs	r3, #1
 80010b6:	60a3      	str	r3, [r4, #8]
 80010b8:	6823      	ldr	r3, [r4, #0]
 80010ba:	1c5a      	adds	r2, r3, #1
 80010bc:	6022      	str	r2, [r4, #0]
 80010be:	701e      	strb	r6, [r3, #0]
 80010c0:	6963      	ldr	r3, [r4, #20]
 80010c2:	3001      	adds	r0, #1
 80010c4:	4283      	cmp	r3, r0
 80010c6:	d004      	beq.n	80010d2 <__swbuf_r+0x62>
 80010c8:	89a3      	ldrh	r3, [r4, #12]
 80010ca:	07db      	lsls	r3, r3, #31
 80010cc:	d506      	bpl.n	80010dc <__swbuf_r+0x6c>
 80010ce:	2e0a      	cmp	r6, #10
 80010d0:	d104      	bne.n	80010dc <__swbuf_r+0x6c>
 80010d2:	4621      	mov	r1, r4
 80010d4:	4628      	mov	r0, r5
 80010d6:	f000 f933 	bl	8001340 <_fflush_r>
 80010da:	b988      	cbnz	r0, 8001100 <__swbuf_r+0x90>
 80010dc:	4638      	mov	r0, r7
 80010de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80010e0:	4b0a      	ldr	r3, [pc, #40]	; (800110c <__swbuf_r+0x9c>)
 80010e2:	429c      	cmp	r4, r3
 80010e4:	d101      	bne.n	80010ea <__swbuf_r+0x7a>
 80010e6:	68ac      	ldr	r4, [r5, #8]
 80010e8:	e7cf      	b.n	800108a <__swbuf_r+0x1a>
 80010ea:	4b09      	ldr	r3, [pc, #36]	; (8001110 <__swbuf_r+0xa0>)
 80010ec:	429c      	cmp	r4, r3
 80010ee:	bf08      	it	eq
 80010f0:	68ec      	ldreq	r4, [r5, #12]
 80010f2:	e7ca      	b.n	800108a <__swbuf_r+0x1a>
 80010f4:	4621      	mov	r1, r4
 80010f6:	4628      	mov	r0, r5
 80010f8:	f000 f81e 	bl	8001138 <__swsetup_r>
 80010fc:	2800      	cmp	r0, #0
 80010fe:	d0cb      	beq.n	8001098 <__swbuf_r+0x28>
 8001100:	f04f 37ff 	mov.w	r7, #4294967295
 8001104:	e7ea      	b.n	80010dc <__swbuf_r+0x6c>
 8001106:	bf00      	nop
 8001108:	08001618 	.word	0x08001618
 800110c:	08001638 	.word	0x08001638
 8001110:	080015f8 	.word	0x080015f8

08001114 <_write_r>:
 8001114:	b538      	push	{r3, r4, r5, lr}
 8001116:	4d07      	ldr	r5, [pc, #28]	; (8001134 <_write_r+0x20>)
 8001118:	4604      	mov	r4, r0
 800111a:	4608      	mov	r0, r1
 800111c:	4611      	mov	r1, r2
 800111e:	2200      	movs	r2, #0
 8001120:	602a      	str	r2, [r5, #0]
 8001122:	461a      	mov	r2, r3
 8001124:	f7ff f905 	bl	8000332 <_write>
 8001128:	1c43      	adds	r3, r0, #1
 800112a:	d102      	bne.n	8001132 <_write_r+0x1e>
 800112c:	682b      	ldr	r3, [r5, #0]
 800112e:	b103      	cbz	r3, 8001132 <_write_r+0x1e>
 8001130:	6023      	str	r3, [r4, #0]
 8001132:	bd38      	pop	{r3, r4, r5, pc}
 8001134:	200000a4 	.word	0x200000a4

08001138 <__swsetup_r>:
 8001138:	4b32      	ldr	r3, [pc, #200]	; (8001204 <__swsetup_r+0xcc>)
 800113a:	b570      	push	{r4, r5, r6, lr}
 800113c:	681d      	ldr	r5, [r3, #0]
 800113e:	4606      	mov	r6, r0
 8001140:	460c      	mov	r4, r1
 8001142:	b125      	cbz	r5, 800114e <__swsetup_r+0x16>
 8001144:	69ab      	ldr	r3, [r5, #24]
 8001146:	b913      	cbnz	r3, 800114e <__swsetup_r+0x16>
 8001148:	4628      	mov	r0, r5
 800114a:	f7ff fb55 	bl	80007f8 <__sinit>
 800114e:	4b2e      	ldr	r3, [pc, #184]	; (8001208 <__swsetup_r+0xd0>)
 8001150:	429c      	cmp	r4, r3
 8001152:	d10f      	bne.n	8001174 <__swsetup_r+0x3c>
 8001154:	686c      	ldr	r4, [r5, #4]
 8001156:	89a3      	ldrh	r3, [r4, #12]
 8001158:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800115c:	0719      	lsls	r1, r3, #28
 800115e:	d42c      	bmi.n	80011ba <__swsetup_r+0x82>
 8001160:	06dd      	lsls	r5, r3, #27
 8001162:	d411      	bmi.n	8001188 <__swsetup_r+0x50>
 8001164:	2309      	movs	r3, #9
 8001166:	6033      	str	r3, [r6, #0]
 8001168:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800116c:	81a3      	strh	r3, [r4, #12]
 800116e:	f04f 30ff 	mov.w	r0, #4294967295
 8001172:	e03e      	b.n	80011f2 <__swsetup_r+0xba>
 8001174:	4b25      	ldr	r3, [pc, #148]	; (800120c <__swsetup_r+0xd4>)
 8001176:	429c      	cmp	r4, r3
 8001178:	d101      	bne.n	800117e <__swsetup_r+0x46>
 800117a:	68ac      	ldr	r4, [r5, #8]
 800117c:	e7eb      	b.n	8001156 <__swsetup_r+0x1e>
 800117e:	4b24      	ldr	r3, [pc, #144]	; (8001210 <__swsetup_r+0xd8>)
 8001180:	429c      	cmp	r4, r3
 8001182:	bf08      	it	eq
 8001184:	68ec      	ldreq	r4, [r5, #12]
 8001186:	e7e6      	b.n	8001156 <__swsetup_r+0x1e>
 8001188:	0758      	lsls	r0, r3, #29
 800118a:	d512      	bpl.n	80011b2 <__swsetup_r+0x7a>
 800118c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800118e:	b141      	cbz	r1, 80011a2 <__swsetup_r+0x6a>
 8001190:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001194:	4299      	cmp	r1, r3
 8001196:	d002      	beq.n	800119e <__swsetup_r+0x66>
 8001198:	4630      	mov	r0, r6
 800119a:	f000 f98f 	bl	80014bc <_free_r>
 800119e:	2300      	movs	r3, #0
 80011a0:	6363      	str	r3, [r4, #52]	; 0x34
 80011a2:	89a3      	ldrh	r3, [r4, #12]
 80011a4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80011a8:	81a3      	strh	r3, [r4, #12]
 80011aa:	2300      	movs	r3, #0
 80011ac:	6063      	str	r3, [r4, #4]
 80011ae:	6923      	ldr	r3, [r4, #16]
 80011b0:	6023      	str	r3, [r4, #0]
 80011b2:	89a3      	ldrh	r3, [r4, #12]
 80011b4:	f043 0308 	orr.w	r3, r3, #8
 80011b8:	81a3      	strh	r3, [r4, #12]
 80011ba:	6923      	ldr	r3, [r4, #16]
 80011bc:	b94b      	cbnz	r3, 80011d2 <__swsetup_r+0x9a>
 80011be:	89a3      	ldrh	r3, [r4, #12]
 80011c0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80011c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80011c8:	d003      	beq.n	80011d2 <__swsetup_r+0x9a>
 80011ca:	4621      	mov	r1, r4
 80011cc:	4630      	mov	r0, r6
 80011ce:	f000 f929 	bl	8001424 <__smakebuf_r>
 80011d2:	89a0      	ldrh	r0, [r4, #12]
 80011d4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80011d8:	f010 0301 	ands.w	r3, r0, #1
 80011dc:	d00a      	beq.n	80011f4 <__swsetup_r+0xbc>
 80011de:	2300      	movs	r3, #0
 80011e0:	60a3      	str	r3, [r4, #8]
 80011e2:	6963      	ldr	r3, [r4, #20]
 80011e4:	425b      	negs	r3, r3
 80011e6:	61a3      	str	r3, [r4, #24]
 80011e8:	6923      	ldr	r3, [r4, #16]
 80011ea:	b943      	cbnz	r3, 80011fe <__swsetup_r+0xc6>
 80011ec:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80011f0:	d1ba      	bne.n	8001168 <__swsetup_r+0x30>
 80011f2:	bd70      	pop	{r4, r5, r6, pc}
 80011f4:	0781      	lsls	r1, r0, #30
 80011f6:	bf58      	it	pl
 80011f8:	6963      	ldrpl	r3, [r4, #20]
 80011fa:	60a3      	str	r3, [r4, #8]
 80011fc:	e7f4      	b.n	80011e8 <__swsetup_r+0xb0>
 80011fe:	2000      	movs	r0, #0
 8001200:	e7f7      	b.n	80011f2 <__swsetup_r+0xba>
 8001202:	bf00      	nop
 8001204:	20000004 	.word	0x20000004
 8001208:	08001618 	.word	0x08001618
 800120c:	08001638 	.word	0x08001638
 8001210:	080015f8 	.word	0x080015f8

08001214 <_close_r>:
 8001214:	b538      	push	{r3, r4, r5, lr}
 8001216:	4d06      	ldr	r5, [pc, #24]	; (8001230 <_close_r+0x1c>)
 8001218:	2300      	movs	r3, #0
 800121a:	4604      	mov	r4, r0
 800121c:	4608      	mov	r0, r1
 800121e:	602b      	str	r3, [r5, #0]
 8001220:	f7ff f8a3 	bl	800036a <_close>
 8001224:	1c43      	adds	r3, r0, #1
 8001226:	d102      	bne.n	800122e <_close_r+0x1a>
 8001228:	682b      	ldr	r3, [r5, #0]
 800122a:	b103      	cbz	r3, 800122e <_close_r+0x1a>
 800122c:	6023      	str	r3, [r4, #0]
 800122e:	bd38      	pop	{r3, r4, r5, pc}
 8001230:	200000a4 	.word	0x200000a4

08001234 <__sflush_r>:
 8001234:	898a      	ldrh	r2, [r1, #12]
 8001236:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800123a:	4605      	mov	r5, r0
 800123c:	0710      	lsls	r0, r2, #28
 800123e:	460c      	mov	r4, r1
 8001240:	d458      	bmi.n	80012f4 <__sflush_r+0xc0>
 8001242:	684b      	ldr	r3, [r1, #4]
 8001244:	2b00      	cmp	r3, #0
 8001246:	dc05      	bgt.n	8001254 <__sflush_r+0x20>
 8001248:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800124a:	2b00      	cmp	r3, #0
 800124c:	dc02      	bgt.n	8001254 <__sflush_r+0x20>
 800124e:	2000      	movs	r0, #0
 8001250:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001254:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001256:	2e00      	cmp	r6, #0
 8001258:	d0f9      	beq.n	800124e <__sflush_r+0x1a>
 800125a:	2300      	movs	r3, #0
 800125c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8001260:	682f      	ldr	r7, [r5, #0]
 8001262:	602b      	str	r3, [r5, #0]
 8001264:	d032      	beq.n	80012cc <__sflush_r+0x98>
 8001266:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001268:	89a3      	ldrh	r3, [r4, #12]
 800126a:	075a      	lsls	r2, r3, #29
 800126c:	d505      	bpl.n	800127a <__sflush_r+0x46>
 800126e:	6863      	ldr	r3, [r4, #4]
 8001270:	1ac0      	subs	r0, r0, r3
 8001272:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001274:	b10b      	cbz	r3, 800127a <__sflush_r+0x46>
 8001276:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001278:	1ac0      	subs	r0, r0, r3
 800127a:	2300      	movs	r3, #0
 800127c:	4602      	mov	r2, r0
 800127e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001280:	6a21      	ldr	r1, [r4, #32]
 8001282:	4628      	mov	r0, r5
 8001284:	47b0      	blx	r6
 8001286:	1c43      	adds	r3, r0, #1
 8001288:	89a3      	ldrh	r3, [r4, #12]
 800128a:	d106      	bne.n	800129a <__sflush_r+0x66>
 800128c:	6829      	ldr	r1, [r5, #0]
 800128e:	291d      	cmp	r1, #29
 8001290:	d82c      	bhi.n	80012ec <__sflush_r+0xb8>
 8001292:	4a2a      	ldr	r2, [pc, #168]	; (800133c <__sflush_r+0x108>)
 8001294:	40ca      	lsrs	r2, r1
 8001296:	07d6      	lsls	r6, r2, #31
 8001298:	d528      	bpl.n	80012ec <__sflush_r+0xb8>
 800129a:	2200      	movs	r2, #0
 800129c:	6062      	str	r2, [r4, #4]
 800129e:	04d9      	lsls	r1, r3, #19
 80012a0:	6922      	ldr	r2, [r4, #16]
 80012a2:	6022      	str	r2, [r4, #0]
 80012a4:	d504      	bpl.n	80012b0 <__sflush_r+0x7c>
 80012a6:	1c42      	adds	r2, r0, #1
 80012a8:	d101      	bne.n	80012ae <__sflush_r+0x7a>
 80012aa:	682b      	ldr	r3, [r5, #0]
 80012ac:	b903      	cbnz	r3, 80012b0 <__sflush_r+0x7c>
 80012ae:	6560      	str	r0, [r4, #84]	; 0x54
 80012b0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80012b2:	602f      	str	r7, [r5, #0]
 80012b4:	2900      	cmp	r1, #0
 80012b6:	d0ca      	beq.n	800124e <__sflush_r+0x1a>
 80012b8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80012bc:	4299      	cmp	r1, r3
 80012be:	d002      	beq.n	80012c6 <__sflush_r+0x92>
 80012c0:	4628      	mov	r0, r5
 80012c2:	f000 f8fb 	bl	80014bc <_free_r>
 80012c6:	2000      	movs	r0, #0
 80012c8:	6360      	str	r0, [r4, #52]	; 0x34
 80012ca:	e7c1      	b.n	8001250 <__sflush_r+0x1c>
 80012cc:	6a21      	ldr	r1, [r4, #32]
 80012ce:	2301      	movs	r3, #1
 80012d0:	4628      	mov	r0, r5
 80012d2:	47b0      	blx	r6
 80012d4:	1c41      	adds	r1, r0, #1
 80012d6:	d1c7      	bne.n	8001268 <__sflush_r+0x34>
 80012d8:	682b      	ldr	r3, [r5, #0]
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d0c4      	beq.n	8001268 <__sflush_r+0x34>
 80012de:	2b1d      	cmp	r3, #29
 80012e0:	d001      	beq.n	80012e6 <__sflush_r+0xb2>
 80012e2:	2b16      	cmp	r3, #22
 80012e4:	d101      	bne.n	80012ea <__sflush_r+0xb6>
 80012e6:	602f      	str	r7, [r5, #0]
 80012e8:	e7b1      	b.n	800124e <__sflush_r+0x1a>
 80012ea:	89a3      	ldrh	r3, [r4, #12]
 80012ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80012f0:	81a3      	strh	r3, [r4, #12]
 80012f2:	e7ad      	b.n	8001250 <__sflush_r+0x1c>
 80012f4:	690f      	ldr	r7, [r1, #16]
 80012f6:	2f00      	cmp	r7, #0
 80012f8:	d0a9      	beq.n	800124e <__sflush_r+0x1a>
 80012fa:	0793      	lsls	r3, r2, #30
 80012fc:	680e      	ldr	r6, [r1, #0]
 80012fe:	bf08      	it	eq
 8001300:	694b      	ldreq	r3, [r1, #20]
 8001302:	600f      	str	r7, [r1, #0]
 8001304:	bf18      	it	ne
 8001306:	2300      	movne	r3, #0
 8001308:	eba6 0807 	sub.w	r8, r6, r7
 800130c:	608b      	str	r3, [r1, #8]
 800130e:	f1b8 0f00 	cmp.w	r8, #0
 8001312:	dd9c      	ble.n	800124e <__sflush_r+0x1a>
 8001314:	6a21      	ldr	r1, [r4, #32]
 8001316:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8001318:	4643      	mov	r3, r8
 800131a:	463a      	mov	r2, r7
 800131c:	4628      	mov	r0, r5
 800131e:	47b0      	blx	r6
 8001320:	2800      	cmp	r0, #0
 8001322:	dc06      	bgt.n	8001332 <__sflush_r+0xfe>
 8001324:	89a3      	ldrh	r3, [r4, #12]
 8001326:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800132a:	81a3      	strh	r3, [r4, #12]
 800132c:	f04f 30ff 	mov.w	r0, #4294967295
 8001330:	e78e      	b.n	8001250 <__sflush_r+0x1c>
 8001332:	4407      	add	r7, r0
 8001334:	eba8 0800 	sub.w	r8, r8, r0
 8001338:	e7e9      	b.n	800130e <__sflush_r+0xda>
 800133a:	bf00      	nop
 800133c:	20400001 	.word	0x20400001

08001340 <_fflush_r>:
 8001340:	b538      	push	{r3, r4, r5, lr}
 8001342:	690b      	ldr	r3, [r1, #16]
 8001344:	4605      	mov	r5, r0
 8001346:	460c      	mov	r4, r1
 8001348:	b913      	cbnz	r3, 8001350 <_fflush_r+0x10>
 800134a:	2500      	movs	r5, #0
 800134c:	4628      	mov	r0, r5
 800134e:	bd38      	pop	{r3, r4, r5, pc}
 8001350:	b118      	cbz	r0, 800135a <_fflush_r+0x1a>
 8001352:	6983      	ldr	r3, [r0, #24]
 8001354:	b90b      	cbnz	r3, 800135a <_fflush_r+0x1a>
 8001356:	f7ff fa4f 	bl	80007f8 <__sinit>
 800135a:	4b14      	ldr	r3, [pc, #80]	; (80013ac <_fflush_r+0x6c>)
 800135c:	429c      	cmp	r4, r3
 800135e:	d11b      	bne.n	8001398 <_fflush_r+0x58>
 8001360:	686c      	ldr	r4, [r5, #4]
 8001362:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001366:	2b00      	cmp	r3, #0
 8001368:	d0ef      	beq.n	800134a <_fflush_r+0xa>
 800136a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800136c:	07d0      	lsls	r0, r2, #31
 800136e:	d404      	bmi.n	800137a <_fflush_r+0x3a>
 8001370:	0599      	lsls	r1, r3, #22
 8001372:	d402      	bmi.n	800137a <_fflush_r+0x3a>
 8001374:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001376:	f7ff fadd 	bl	8000934 <__retarget_lock_acquire_recursive>
 800137a:	4628      	mov	r0, r5
 800137c:	4621      	mov	r1, r4
 800137e:	f7ff ff59 	bl	8001234 <__sflush_r>
 8001382:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001384:	07da      	lsls	r2, r3, #31
 8001386:	4605      	mov	r5, r0
 8001388:	d4e0      	bmi.n	800134c <_fflush_r+0xc>
 800138a:	89a3      	ldrh	r3, [r4, #12]
 800138c:	059b      	lsls	r3, r3, #22
 800138e:	d4dd      	bmi.n	800134c <_fflush_r+0xc>
 8001390:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001392:	f7ff fad0 	bl	8000936 <__retarget_lock_release_recursive>
 8001396:	e7d9      	b.n	800134c <_fflush_r+0xc>
 8001398:	4b05      	ldr	r3, [pc, #20]	; (80013b0 <_fflush_r+0x70>)
 800139a:	429c      	cmp	r4, r3
 800139c:	d101      	bne.n	80013a2 <_fflush_r+0x62>
 800139e:	68ac      	ldr	r4, [r5, #8]
 80013a0:	e7df      	b.n	8001362 <_fflush_r+0x22>
 80013a2:	4b04      	ldr	r3, [pc, #16]	; (80013b4 <_fflush_r+0x74>)
 80013a4:	429c      	cmp	r4, r3
 80013a6:	bf08      	it	eq
 80013a8:	68ec      	ldreq	r4, [r5, #12]
 80013aa:	e7da      	b.n	8001362 <_fflush_r+0x22>
 80013ac:	08001618 	.word	0x08001618
 80013b0:	08001638 	.word	0x08001638
 80013b4:	080015f8 	.word	0x080015f8

080013b8 <_lseek_r>:
 80013b8:	b538      	push	{r3, r4, r5, lr}
 80013ba:	4d07      	ldr	r5, [pc, #28]	; (80013d8 <_lseek_r+0x20>)
 80013bc:	4604      	mov	r4, r0
 80013be:	4608      	mov	r0, r1
 80013c0:	4611      	mov	r1, r2
 80013c2:	2200      	movs	r2, #0
 80013c4:	602a      	str	r2, [r5, #0]
 80013c6:	461a      	mov	r2, r3
 80013c8:	f7fe fff6 	bl	80003b8 <_lseek>
 80013cc:	1c43      	adds	r3, r0, #1
 80013ce:	d102      	bne.n	80013d6 <_lseek_r+0x1e>
 80013d0:	682b      	ldr	r3, [r5, #0]
 80013d2:	b103      	cbz	r3, 80013d6 <_lseek_r+0x1e>
 80013d4:	6023      	str	r3, [r4, #0]
 80013d6:	bd38      	pop	{r3, r4, r5, pc}
 80013d8:	200000a4 	.word	0x200000a4

080013dc <__swhatbuf_r>:
 80013dc:	b570      	push	{r4, r5, r6, lr}
 80013de:	460e      	mov	r6, r1
 80013e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80013e4:	2900      	cmp	r1, #0
 80013e6:	b096      	sub	sp, #88	; 0x58
 80013e8:	4614      	mov	r4, r2
 80013ea:	461d      	mov	r5, r3
 80013ec:	da07      	bge.n	80013fe <__swhatbuf_r+0x22>
 80013ee:	2300      	movs	r3, #0
 80013f0:	602b      	str	r3, [r5, #0]
 80013f2:	89b3      	ldrh	r3, [r6, #12]
 80013f4:	061a      	lsls	r2, r3, #24
 80013f6:	d410      	bmi.n	800141a <__swhatbuf_r+0x3e>
 80013f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80013fc:	e00e      	b.n	800141c <__swhatbuf_r+0x40>
 80013fe:	466a      	mov	r2, sp
 8001400:	f000 f8be 	bl	8001580 <_fstat_r>
 8001404:	2800      	cmp	r0, #0
 8001406:	dbf2      	blt.n	80013ee <__swhatbuf_r+0x12>
 8001408:	9a01      	ldr	r2, [sp, #4]
 800140a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800140e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8001412:	425a      	negs	r2, r3
 8001414:	415a      	adcs	r2, r3
 8001416:	602a      	str	r2, [r5, #0]
 8001418:	e7ee      	b.n	80013f8 <__swhatbuf_r+0x1c>
 800141a:	2340      	movs	r3, #64	; 0x40
 800141c:	2000      	movs	r0, #0
 800141e:	6023      	str	r3, [r4, #0]
 8001420:	b016      	add	sp, #88	; 0x58
 8001422:	bd70      	pop	{r4, r5, r6, pc}

08001424 <__smakebuf_r>:
 8001424:	898b      	ldrh	r3, [r1, #12]
 8001426:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001428:	079d      	lsls	r5, r3, #30
 800142a:	4606      	mov	r6, r0
 800142c:	460c      	mov	r4, r1
 800142e:	d507      	bpl.n	8001440 <__smakebuf_r+0x1c>
 8001430:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8001434:	6023      	str	r3, [r4, #0]
 8001436:	6123      	str	r3, [r4, #16]
 8001438:	2301      	movs	r3, #1
 800143a:	6163      	str	r3, [r4, #20]
 800143c:	b002      	add	sp, #8
 800143e:	bd70      	pop	{r4, r5, r6, pc}
 8001440:	ab01      	add	r3, sp, #4
 8001442:	466a      	mov	r2, sp
 8001444:	f7ff ffca 	bl	80013dc <__swhatbuf_r>
 8001448:	9900      	ldr	r1, [sp, #0]
 800144a:	4605      	mov	r5, r0
 800144c:	4630      	mov	r0, r6
 800144e:	f7ff fa73 	bl	8000938 <_malloc_r>
 8001452:	b948      	cbnz	r0, 8001468 <__smakebuf_r+0x44>
 8001454:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001458:	059a      	lsls	r2, r3, #22
 800145a:	d4ef      	bmi.n	800143c <__smakebuf_r+0x18>
 800145c:	f023 0303 	bic.w	r3, r3, #3
 8001460:	f043 0302 	orr.w	r3, r3, #2
 8001464:	81a3      	strh	r3, [r4, #12]
 8001466:	e7e3      	b.n	8001430 <__smakebuf_r+0xc>
 8001468:	4b0d      	ldr	r3, [pc, #52]	; (80014a0 <__smakebuf_r+0x7c>)
 800146a:	62b3      	str	r3, [r6, #40]	; 0x28
 800146c:	89a3      	ldrh	r3, [r4, #12]
 800146e:	6020      	str	r0, [r4, #0]
 8001470:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001474:	81a3      	strh	r3, [r4, #12]
 8001476:	9b00      	ldr	r3, [sp, #0]
 8001478:	6163      	str	r3, [r4, #20]
 800147a:	9b01      	ldr	r3, [sp, #4]
 800147c:	6120      	str	r0, [r4, #16]
 800147e:	b15b      	cbz	r3, 8001498 <__smakebuf_r+0x74>
 8001480:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001484:	4630      	mov	r0, r6
 8001486:	f000 f88d 	bl	80015a4 <_isatty_r>
 800148a:	b128      	cbz	r0, 8001498 <__smakebuf_r+0x74>
 800148c:	89a3      	ldrh	r3, [r4, #12]
 800148e:	f023 0303 	bic.w	r3, r3, #3
 8001492:	f043 0301 	orr.w	r3, r3, #1
 8001496:	81a3      	strh	r3, [r4, #12]
 8001498:	89a0      	ldrh	r0, [r4, #12]
 800149a:	4305      	orrs	r5, r0
 800149c:	81a5      	strh	r5, [r4, #12]
 800149e:	e7cd      	b.n	800143c <__smakebuf_r+0x18>
 80014a0:	08000791 	.word	0x08000791

080014a4 <__malloc_lock>:
 80014a4:	4801      	ldr	r0, [pc, #4]	; (80014ac <__malloc_lock+0x8>)
 80014a6:	f7ff ba45 	b.w	8000934 <__retarget_lock_acquire_recursive>
 80014aa:	bf00      	nop
 80014ac:	2000009c 	.word	0x2000009c

080014b0 <__malloc_unlock>:
 80014b0:	4801      	ldr	r0, [pc, #4]	; (80014b8 <__malloc_unlock+0x8>)
 80014b2:	f7ff ba40 	b.w	8000936 <__retarget_lock_release_recursive>
 80014b6:	bf00      	nop
 80014b8:	2000009c 	.word	0x2000009c

080014bc <_free_r>:
 80014bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80014be:	2900      	cmp	r1, #0
 80014c0:	d048      	beq.n	8001554 <_free_r+0x98>
 80014c2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80014c6:	9001      	str	r0, [sp, #4]
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	f1a1 0404 	sub.w	r4, r1, #4
 80014ce:	bfb8      	it	lt
 80014d0:	18e4      	addlt	r4, r4, r3
 80014d2:	f7ff ffe7 	bl	80014a4 <__malloc_lock>
 80014d6:	4a20      	ldr	r2, [pc, #128]	; (8001558 <_free_r+0x9c>)
 80014d8:	9801      	ldr	r0, [sp, #4]
 80014da:	6813      	ldr	r3, [r2, #0]
 80014dc:	4615      	mov	r5, r2
 80014de:	b933      	cbnz	r3, 80014ee <_free_r+0x32>
 80014e0:	6063      	str	r3, [r4, #4]
 80014e2:	6014      	str	r4, [r2, #0]
 80014e4:	b003      	add	sp, #12
 80014e6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80014ea:	f7ff bfe1 	b.w	80014b0 <__malloc_unlock>
 80014ee:	42a3      	cmp	r3, r4
 80014f0:	d90b      	bls.n	800150a <_free_r+0x4e>
 80014f2:	6821      	ldr	r1, [r4, #0]
 80014f4:	1862      	adds	r2, r4, r1
 80014f6:	4293      	cmp	r3, r2
 80014f8:	bf04      	itt	eq
 80014fa:	681a      	ldreq	r2, [r3, #0]
 80014fc:	685b      	ldreq	r3, [r3, #4]
 80014fe:	6063      	str	r3, [r4, #4]
 8001500:	bf04      	itt	eq
 8001502:	1852      	addeq	r2, r2, r1
 8001504:	6022      	streq	r2, [r4, #0]
 8001506:	602c      	str	r4, [r5, #0]
 8001508:	e7ec      	b.n	80014e4 <_free_r+0x28>
 800150a:	461a      	mov	r2, r3
 800150c:	685b      	ldr	r3, [r3, #4]
 800150e:	b10b      	cbz	r3, 8001514 <_free_r+0x58>
 8001510:	42a3      	cmp	r3, r4
 8001512:	d9fa      	bls.n	800150a <_free_r+0x4e>
 8001514:	6811      	ldr	r1, [r2, #0]
 8001516:	1855      	adds	r5, r2, r1
 8001518:	42a5      	cmp	r5, r4
 800151a:	d10b      	bne.n	8001534 <_free_r+0x78>
 800151c:	6824      	ldr	r4, [r4, #0]
 800151e:	4421      	add	r1, r4
 8001520:	1854      	adds	r4, r2, r1
 8001522:	42a3      	cmp	r3, r4
 8001524:	6011      	str	r1, [r2, #0]
 8001526:	d1dd      	bne.n	80014e4 <_free_r+0x28>
 8001528:	681c      	ldr	r4, [r3, #0]
 800152a:	685b      	ldr	r3, [r3, #4]
 800152c:	6053      	str	r3, [r2, #4]
 800152e:	4421      	add	r1, r4
 8001530:	6011      	str	r1, [r2, #0]
 8001532:	e7d7      	b.n	80014e4 <_free_r+0x28>
 8001534:	d902      	bls.n	800153c <_free_r+0x80>
 8001536:	230c      	movs	r3, #12
 8001538:	6003      	str	r3, [r0, #0]
 800153a:	e7d3      	b.n	80014e4 <_free_r+0x28>
 800153c:	6825      	ldr	r5, [r4, #0]
 800153e:	1961      	adds	r1, r4, r5
 8001540:	428b      	cmp	r3, r1
 8001542:	bf04      	itt	eq
 8001544:	6819      	ldreq	r1, [r3, #0]
 8001546:	685b      	ldreq	r3, [r3, #4]
 8001548:	6063      	str	r3, [r4, #4]
 800154a:	bf04      	itt	eq
 800154c:	1949      	addeq	r1, r1, r5
 800154e:	6021      	streq	r1, [r4, #0]
 8001550:	6054      	str	r4, [r2, #4]
 8001552:	e7c7      	b.n	80014e4 <_free_r+0x28>
 8001554:	b003      	add	sp, #12
 8001556:	bd30      	pop	{r4, r5, pc}
 8001558:	20000088 	.word	0x20000088

0800155c <_read_r>:
 800155c:	b538      	push	{r3, r4, r5, lr}
 800155e:	4d07      	ldr	r5, [pc, #28]	; (800157c <_read_r+0x20>)
 8001560:	4604      	mov	r4, r0
 8001562:	4608      	mov	r0, r1
 8001564:	4611      	mov	r1, r2
 8001566:	2200      	movs	r2, #0
 8001568:	602a      	str	r2, [r5, #0]
 800156a:	461a      	mov	r2, r3
 800156c:	f7fe fec4 	bl	80002f8 <_read>
 8001570:	1c43      	adds	r3, r0, #1
 8001572:	d102      	bne.n	800157a <_read_r+0x1e>
 8001574:	682b      	ldr	r3, [r5, #0]
 8001576:	b103      	cbz	r3, 800157a <_read_r+0x1e>
 8001578:	6023      	str	r3, [r4, #0]
 800157a:	bd38      	pop	{r3, r4, r5, pc}
 800157c:	200000a4 	.word	0x200000a4

08001580 <_fstat_r>:
 8001580:	b538      	push	{r3, r4, r5, lr}
 8001582:	4d07      	ldr	r5, [pc, #28]	; (80015a0 <_fstat_r+0x20>)
 8001584:	2300      	movs	r3, #0
 8001586:	4604      	mov	r4, r0
 8001588:	4608      	mov	r0, r1
 800158a:	4611      	mov	r1, r2
 800158c:	602b      	str	r3, [r5, #0]
 800158e:	f7fe fef8 	bl	8000382 <_fstat>
 8001592:	1c43      	adds	r3, r0, #1
 8001594:	d102      	bne.n	800159c <_fstat_r+0x1c>
 8001596:	682b      	ldr	r3, [r5, #0]
 8001598:	b103      	cbz	r3, 800159c <_fstat_r+0x1c>
 800159a:	6023      	str	r3, [r4, #0]
 800159c:	bd38      	pop	{r3, r4, r5, pc}
 800159e:	bf00      	nop
 80015a0:	200000a4 	.word	0x200000a4

080015a4 <_isatty_r>:
 80015a4:	b538      	push	{r3, r4, r5, lr}
 80015a6:	4d06      	ldr	r5, [pc, #24]	; (80015c0 <_isatty_r+0x1c>)
 80015a8:	2300      	movs	r3, #0
 80015aa:	4604      	mov	r4, r0
 80015ac:	4608      	mov	r0, r1
 80015ae:	602b      	str	r3, [r5, #0]
 80015b0:	f7fe fef7 	bl	80003a2 <_isatty>
 80015b4:	1c43      	adds	r3, r0, #1
 80015b6:	d102      	bne.n	80015be <_isatty_r+0x1a>
 80015b8:	682b      	ldr	r3, [r5, #0]
 80015ba:	b103      	cbz	r3, 80015be <_isatty_r+0x1a>
 80015bc:	6023      	str	r3, [r4, #0]
 80015be:	bd38      	pop	{r3, r4, r5, pc}
 80015c0:	200000a4 	.word	0x200000a4

080015c4 <_init>:
 80015c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80015c6:	bf00      	nop
 80015c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80015ca:	bc08      	pop	{r3}
 80015cc:	469e      	mov	lr, r3
 80015ce:	4770      	bx	lr

080015d0 <_fini>:
 80015d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80015d2:	bf00      	nop
 80015d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80015d6:	bc08      	pop	{r3}
 80015d8:	469e      	mov	lr, r3
 80015da:	4770      	bx	lr
